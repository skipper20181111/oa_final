// Code generated by goctl. DO NOT EDIT!

package cachemodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	wxDeliveryFieldNames          = builder.RawFieldNames(&WxDelivery{})
	wxDeliveryRows                = strings.Join(wxDeliveryFieldNames, ",")
	wxDeliveryRowsExpectAutoSet   = strings.Join(stringx.Remove(wxDeliveryFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	wxDeliveryRowsWithPlaceHolder = strings.Join(stringx.Remove(wxDeliveryFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	wxDeliveryModel interface {
		Insert(ctx context.Context, data *WxDelivery) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*WxDelivery, error)
		FindOneByOutTradeNo(ctx context.Context, outTradeNo string) (*WxDelivery, error)
		Update(ctx context.Context, data *WxDelivery) error
		Delete(ctx context.Context, id int64) error
		UpdateFinished(ctx context.Context, OutTradeSn string) error
		InsertPayinfo(ctx context.Context, data *PayInfo) (sql.Result, error)
	}

	defaultWxDeliveryModel struct {
		conn  sqlx.SqlConn
		table string
	}

	WxDelivery struct {
		Id                      int64     `db:"id"`                         // id
		Phone                   string    `db:"phone"`                      // 账户手机号
		OutTradeNo              string    `db:"out_trade_no"`               // 微信交易编号
		TransactionType         string    `db:"transaction_type"`           // 交易种类
		TransactionId           string    `db:"transaction_id"`             // 微信支付编号
		CreateOrderTime         time.Time `db:"create_order_time"`          // 订单产生时间
		Pidlist                 string    `db:"pidlist"`                    // 订单商品列表
		TotleAmount             int64     `db:"totle_amount"`               // 总金额
		WexinPayAmount          int64     `db:"wexin_pay_amount"`           // 微信支付金额
		CashAccountPayAmount    int64     `db:"cash_account_pay_amount"`    // 现金账户支付金额
		WexinRefundAmount       int64     `db:"wexin_refund_amount"`        // 微信退款金额
		CashAccountRefundAmount int64     `db:"cash_account_refund_amount"` // 现金账户退款金额
		FinishWeixinpay         int64     `db:"finish_weixinpay"`           // 是否完成微信支付
		FinishAccountpay        int64     `db:"finish_accountpay"`          // 是否完成账户支付
		Status                  int64     `db:"status"`                     // 0->未完成；1->已完成；2->部分退款;3->全部退款，4->全部已收货
		InvoiceStatus           int64     `db:"invoice_status"`             // 处理：1->已填信息预开票状态；2->开票中；3->开票完成；4->开票失败
		WexinPaymentTime        time.Time `db:"wexin_payment_time"`         // 微信支付时间
		CashAccountPaymentTime  time.Time `db:"cash_account_payment_time"`  // 现金账户支付时间
		LogId                   int64     `db:"log_id"`
	}
)

func newWxDeliveryModel(conn sqlx.SqlConn) *defaultWxDeliveryModel {
	return &defaultWxDeliveryModel{
		conn:  conn,
		table: "`wx_delivery`",
	}
}
func (m *defaultWxDeliveryModel) InsertPayinfo(ctx context.Context, data *PayInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, wxDeliveryRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Phone, data.OutTradeNo, data.TransactionType, data.TransactionId, data.CreateOrderTime, data.Pidlist, data.TotleAmount, data.WexinPayAmount, data.CashAccountPayAmount, data.WexinRefundAmount, data.CashAccountRefundAmount, data.FinishWeixinpay, data.FinishAccountpay, data.Status, data.InvoiceStatus, data.WexinPaymentTime, data.CashAccountPaymentTime, data.LogId)
	return ret, err
}
func (m *defaultWxDeliveryModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}
func (m *defaultWxDeliveryModel) UpdateFinished(ctx context.Context, OutTradeSn string) error {
	query := fmt.Sprintf("update %s set  `status`=90000 where `out_trade_no` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, OutTradeSn)
	return err
}
func (m *defaultWxDeliveryModel) FindOne(ctx context.Context, id int64) (*WxDelivery, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", wxDeliveryRows, m.table)
	var resp WxDelivery
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWxDeliveryModel) FindOneByOutTradeNo(ctx context.Context, outTradeNo string) (*WxDelivery, error) {
	var resp WxDelivery
	query := fmt.Sprintf("select %s from %s where `out_trade_no` = ? limit 1", wxDeliveryRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, outTradeNo)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWxDeliveryModel) Insert(ctx context.Context, data *WxDelivery) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, wxDeliveryRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Phone, data.OutTradeNo, data.TransactionType, data.TransactionId, data.CreateOrderTime, data.Pidlist, data.TotleAmount, data.WexinPayAmount, data.CashAccountPayAmount, data.WexinRefundAmount, data.CashAccountRefundAmount, data.FinishWeixinpay, data.FinishAccountpay, data.Status, data.InvoiceStatus, data.WexinPaymentTime, data.CashAccountPaymentTime, data.LogId)
	return ret, err
}

func (m *defaultWxDeliveryModel) Update(ctx context.Context, newData *WxDelivery) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, wxDeliveryRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Phone, newData.OutTradeNo, newData.TransactionType, newData.TransactionId, newData.CreateOrderTime, newData.Pidlist, newData.TotleAmount, newData.WexinPayAmount, newData.CashAccountPayAmount, newData.WexinRefundAmount, newData.CashAccountRefundAmount, newData.FinishWeixinpay, newData.FinishAccountpay, newData.Status, newData.InvoiceStatus, newData.WexinPaymentTime, newData.CashAccountPaymentTime, newData.LogId, newData.Id)
	return err
}

func (m *defaultWxDeliveryModel) tableName() string {
	return m.table
}
