// Code generated by goctl. DO NOT EDIT!

package cachemodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	rechargeProductFieldNames          = builder.RawFieldNames(&RechargeProduct{})
	rechargeProductRows                = strings.Join(rechargeProductFieldNames, ",")
	rechargeProductRowsExpectAutoSet   = strings.Join(stringx.Remove(rechargeProductFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	rechargeProductRowsWithPlaceHolder = strings.Join(stringx.Remove(rechargeProductFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	rechargeProductModel interface {
		Insert(ctx context.Context, data *RechargeProduct) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RechargeProduct, error)
		FindOneByRpid(ctx context.Context, rpid int64) (*RechargeProduct, error)
		Update(ctx context.Context, data *RechargeProduct) error
		Delete(ctx context.Context, id int64) error
		FindAll(ctx context.Context) ([]*RechargeProduct, error)
	}

	defaultRechargeProductModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RechargeProduct struct {
		Id         int64  `db:"id"`
		Rpid       int64  `db:"rpid"`
		Describe   string `db:"describe"`    // 充值券描述
		GiftAmount int64  `db:"gift_amount"` // 赠送额度
		Price      int64  `db:"price"`       // 价格
		Type       string `db:"type"`        // 类型（中文）
	}
)

func newRechargeProductModel(conn sqlx.SqlConn) *defaultRechargeProductModel {
	return &defaultRechargeProductModel{
		conn:  conn,
		table: "`recharge_product`",
	}
}

func (m *defaultRechargeProductModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRechargeProductModel) FindOne(ctx context.Context, id int64) (*RechargeProduct, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", rechargeProductRows, m.table)
	var resp RechargeProduct
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultRechargeProductModel) FindAll(ctx context.Context) ([]*RechargeProduct, error) {
	query := fmt.Sprintf("select %s from %s", rechargeProductRows, m.table)
	var resp []*RechargeProduct
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRechargeProductModel) FindOneByRpid(ctx context.Context, rpid int64) (*RechargeProduct, error) {
	var resp RechargeProduct
	query := fmt.Sprintf("select %s from %s where `rpid` = ? limit 1", rechargeProductRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, rpid)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRechargeProductModel) Insert(ctx context.Context, data *RechargeProduct) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, rechargeProductRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Rpid, data.Describe, data.GiftAmount, data.Price, data.Type)
	return ret, err
}

func (m *defaultRechargeProductModel) Update(ctx context.Context, newData *RechargeProduct) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, rechargeProductRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Rpid, newData.Describe, newData.GiftAmount, newData.Price, newData.Type, newData.Id)
	return err
}

func (m *defaultRechargeProductModel) tableName() string {
	return m.table
}
