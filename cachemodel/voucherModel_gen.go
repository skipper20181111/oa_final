// Code generated by goctl. DO NOT EDIT!

package cachemodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	voucherFieldNames          = builder.RawFieldNames(&Voucher{})
	voucherRows                = strings.Join(voucherFieldNames, ",")
	voucherRowsExpectAutoSet   = strings.Join(stringx.Remove(voucherFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	voucherRowsWithPlaceHolder = strings.Join(stringx.Remove(voucherFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	voucherModel interface {
		Insert(ctx context.Context, data *Voucher) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Voucher, error)
		FindOneByVid(ctx context.Context, vid int64) (*Voucher, error)
		FindOneByVoucherCode(ctx context.Context, voucherCode string) (*Voucher, error)
		Update(ctx context.Context, data *Voucher) error
		Delete(ctx context.Context, id int64) error
	}

	defaultVoucherModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Voucher struct {
		Id          int64  `db:"id"`
		Vid         int64  `db:"vid"`          // 消费券id
		CouponId    int64  `db:"coupon_id"`    // 对应的券大类,有券的详细信息
		VoucherCode string `db:"voucher_code"` // 唯一券码
		Phone       string `db:"phone"`        // 账号
	}
)

func newVoucherModel(conn sqlx.SqlConn) *defaultVoucherModel {
	return &defaultVoucherModel{
		conn:  conn,
		table: "`voucher`",
	}
}

func (m *defaultVoucherModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultVoucherModel) FindOne(ctx context.Context, id int64) (*Voucher, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", voucherRows, m.table)
	var resp Voucher
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultVoucherModel) FindOneByVid(ctx context.Context, vid int64) (*Voucher, error) {
	var resp Voucher
	query := fmt.Sprintf("select %s from %s where `vid` = ? limit 1", voucherRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, vid)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultVoucherModel) FindOneByVoucherCode(ctx context.Context, voucherCode string) (*Voucher, error) {
	var resp Voucher
	query := fmt.Sprintf("select %s from %s where `voucher_code` = ? limit 1", voucherRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, voucherCode)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultVoucherModel) Insert(ctx context.Context, data *Voucher) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, voucherRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Vid, data.CouponId, data.VoucherCode, data.Phone)
	return ret, err
}

func (m *defaultVoucherModel) Update(ctx context.Context, newData *Voucher) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, voucherRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Vid, newData.CouponId, newData.VoucherCode, newData.Phone, newData.Id)
	return err
}

func (m *defaultVoucherModel) tableName() string {
	return m.table
}
