// Code generated by goctl. DO NOT EDIT!

package cachemodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	couponFieldNames          = builder.RawFieldNames(&Coupon{})
	couponRows                = strings.Join(couponFieldNames, ",")
	couponRowsExpectAutoSet   = strings.Join(stringx.Remove(couponFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	couponRowsWithPlaceHolder = strings.Join(stringx.Remove(couponFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	couponModel interface {
		Insert(ctx context.Context, data *Coupon) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Coupon, error)
		FindOneByCouponId(ctx context.Context, couponId int64) (*Coupon, error)
		Update(ctx context.Context, data *Coupon) error
		Delete(ctx context.Context, id int64) error
		FindAll(ctx context.Context) ([]*Coupon, error)
	}

	defaultCouponModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Coupon struct {
		Id              int64     `db:"id"`
		CouponId        int64     `db:"coupon_id"`
		Type            int64     `db:"type"` // 优惠券类型；0->满减；1->代金券；2->打折; 9-> 老带新专属代码，只能有一个
		Name            string    `db:"name"`
		Limitation      int64     `db:"limitation"`       // 单人拥有数量限额
		Discount        int64     `db:"discount"`         // 打折折扣
		Cut             int64     `db:"cut"`              // 满减额度
		MinPoint        int64     `db:"min_point"`        // 满减使用门槛；0表示无门槛
		AvailableAmount int64     `db:"available_amount"` // 代金券金额
		UseType         int64     `db:"use_type"`         // 使用类型：0->全场通用；1->指定分类；2->指定商品
		Note            string    `db:"note"`             // 备注
		EnableTime      time.Time `db:"enable_time"`      // 有效日期
		DisableTime     time.Time `db:"disable_time"`     // 失效日期
		TypeZh          string    `db:"type_zh"`          // 优惠券的类型
		EfficientPeriod int64     `db:"efficient_period"`
		Picture         string    `db:"picture"`        // 优惠券图片
		UsePoints       int64     `db:"use_points"`     // 兑换需要的积分
		ExchangeNotes   string    `db:"Exchange_notes"` // 兑换须知
	}
)

func newCouponModel(conn sqlx.SqlConn) *defaultCouponModel {
	return &defaultCouponModel{
		conn:  conn,
		table: "`coupon`",
	}
}

func (m *defaultCouponModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}
func (m *defaultCouponModel) FindAll(ctx context.Context) ([]*Coupon, error) {
	query := fmt.Sprintf("select %s from %s", couponRows, m.table)
	var resp []*Coupon
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultCouponModel) FindOne(ctx context.Context, id int64) (*Coupon, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", couponRows, m.table)
	var resp Coupon
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCouponModel) FindOneByCouponId(ctx context.Context, couponId int64) (*Coupon, error) {
	var resp Coupon
	query := fmt.Sprintf("select %s from %s where `coupon_id` = ? limit 1", couponRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, couponId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCouponModel) Insert(ctx context.Context, data *Coupon) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, couponRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CouponId, data.Type, data.Name, data.Limitation, data.Discount, data.Cut, data.MinPoint, data.AvailableAmount, data.UseType, data.Note, data.EnableTime, data.DisableTime, data.TypeZh, data.EfficientPeriod, data.Picture, data.UsePoints, data.ExchangeNotes)
	return ret, err
}

func (m *defaultCouponModel) Update(ctx context.Context, newData *Coupon) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, couponRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.CouponId, newData.Type, newData.Name, newData.Limitation, newData.Discount, newData.Cut, newData.MinPoint, newData.AvailableAmount, newData.UseType, newData.Note, newData.EnableTime, newData.DisableTime, newData.TypeZh, newData.EfficientPeriod, newData.Picture, newData.UsePoints, newData.ExchangeNotes, newData.Id)
	return err
}

func (m *defaultCouponModel) tableName() string {
	return m.table
}
