// Code generated by goctl. DO NOT EDIT!

package cachemodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	accountOperateLogFieldNames          = builder.RawFieldNames(&AccountOperateLog{})
	accountOperateLogRows                = strings.Join(accountOperateLogFieldNames, ",")
	accountOperateLogRowsExpectAutoSet   = strings.Join(stringx.Remove(accountOperateLogFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	accountOperateLogRowsWithPlaceHolder = strings.Join(stringx.Remove(accountOperateLogFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	accountOperateLogModel interface {
		Insert(ctx context.Context, data *AccountOperateLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AccountOperateLog, error)
		Update(ctx context.Context, data *AccountOperateLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAccountOperateLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	AccountOperateLog struct {
		Id        int64     `db:"id"`         // id
		Lid       int64     `db:"lid"`        // lid
		Phone     string    `db:"phone"`      // 操作人
		TableName string    `db:"table_name"` // 操作表名
		Event     string    `db:"event"`      // 事件
		Describe  string    `db:"describe"`   // 操作表述
		Timestamp time.Time `db:"timestamp"`  // 时间戳
	}
)

func newAccountOperateLogModel(conn sqlx.SqlConn) *defaultAccountOperateLogModel {
	return &defaultAccountOperateLogModel{
		conn:  conn,
		table: "`account_operate_log`",
	}
}

func (m *defaultAccountOperateLogModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAccountOperateLogModel) FindOne(ctx context.Context, id int64) (*AccountOperateLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", accountOperateLogRows, m.table)
	var resp AccountOperateLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccountOperateLogModel) Insert(ctx context.Context, data *AccountOperateLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, accountOperateLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Lid, data.Phone, data.TableName, data.Event, data.Describe, data.Timestamp)
	return ret, err
}

func (m *defaultAccountOperateLogModel) Update(ctx context.Context, data *AccountOperateLog) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, accountOperateLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Lid, data.Phone, data.TableName, data.Event, data.Describe, data.Timestamp, data.Id)
	return err
}

func (m *defaultAccountOperateLogModel) tableName() string {
	return m.table
}
