// Code generated by goctl. DO NOT EDIT!

package cachemodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	transactionInfoFieldNames          = builder.RawFieldNames(&TransactionInfo{})
	transactionInfoRows                = strings.Join(transactionInfoFieldNames, ",")
	transactionInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(transactionInfoFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	transactionInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(transactionInfoFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	transactionInfoModel interface {
		Insert(ctx context.Context, data *TransactionInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TransactionInfo, error)
		FindOneByOrderSn(ctx context.Context, orderSn string) (*TransactionInfo, error)
		FindOneByOutTradeNo(ctx context.Context, outTradeNo string) (*TransactionInfo, error)
		Update(ctx context.Context, data *TransactionInfo) error
		Delete(ctx context.Context, id int64) error
		UpdateCashPay(ctx context.Context, OrderSn string) error
		UpdateWeixinPay(ctx context.Context, OrderSn, transactionid string) error
		UpdateWeixinReject(ctx context.Context, OrderSn string) error
		UpdateCashReject(ctx context.Context, OrderSn string) error
		UpdateAllReject(ctx context.Context, OrderSn string) error
		UpdateAllPay(ctx context.Context, OrderSn string) error
	}

	defaultTransactionInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TransactionInfo struct {
		Id                     int64     `db:"id"`                        // id
		Phone                  string    `db:"phone"`                     // 账户手机号
		OrderSn                string    `db:"order_sn"`                  // 订单编号
		OutTradeNo             string    `db:"out_trade_no"`              // 微信交易编号
		TransactionType        string    `db:"transaction_type"`          // 交易种类
		TransactionId          string    `db:"transaction_id"`            // 微信支付编号
		CreateOrderTime        time.Time `db:"create_order_time"`         // 订单产生时间
		Amount                 int64     `db:"amount"`                    // 金额
		NeedCashAccount        int64     `db:"need_cash_account"`         // 是否需要现金账户支付
		WexinPayAmount         int64     `db:"wexin_pay_amount"`          // 微信支付金额
		CashAccountPayAmount   int64     `db:"cash_account_pay_amount"`   // 现金账户支付金额
		FinishWeixinpay        int64     `db:"finish_weixinpay"`          // 是否完成微信支付
		FinishAccountpay       int64     `db:"finish_accountpay"`         // 是否完成账户支付
		Status                 int64     `db:"status"`                    // 0->未完成；1->已完成
		WexinPaymentTime       time.Time `db:"wexin_payment_time"`        // 微信支付时间
		CashAccountPaymentTime time.Time `db:"cash_account_payment_time"` // 现金账户支付时间
		LogId                  int64     `db:"log_id"`
	}
)

func newTransactionInfoModel(conn sqlx.SqlConn) *defaultTransactionInfoModel {
	return &defaultTransactionInfoModel{
		conn:  conn,
		table: "`transaction_info`",
	}
}

func (m *defaultTransactionInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTransactionInfoModel) FindOne(ctx context.Context, id int64) (*TransactionInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", transactionInfoRows, m.table)
	var resp TransactionInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTransactionInfoModel) FindOneByOrderSn(ctx context.Context, orderSn string) (*TransactionInfo, error) {
	var resp TransactionInfo
	query := fmt.Sprintf("select %s from %s where `order_sn` = ? limit 1", transactionInfoRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, orderSn)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTransactionInfoModel) FindOneByOutTradeNo(ctx context.Context, outTradeNo string) (*TransactionInfo, error) {
	var resp TransactionInfo
	query := fmt.Sprintf("select %s from %s where `out_trade_no` = ? limit 1", transactionInfoRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, outTradeNo)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTransactionInfoModel) Insert(ctx context.Context, data *TransactionInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, transactionInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Phone, data.OrderSn, data.OutTradeNo, data.TransactionType, data.TransactionId, data.CreateOrderTime, data.Amount, data.NeedCashAccount, data.WexinPayAmount, data.CashAccountPayAmount, data.FinishWeixinpay, data.FinishAccountpay, data.Status, data.WexinPaymentTime, data.CashAccountPaymentTime, data.LogId)
	return ret, err
}

func (m *defaultTransactionInfoModel) Update(ctx context.Context, newData *TransactionInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, transactionInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Phone, newData.OrderSn, newData.OutTradeNo, newData.TransactionType, newData.TransactionId, newData.CreateOrderTime, newData.Amount, newData.NeedCashAccount, newData.WexinPayAmount, newData.CashAccountPayAmount, newData.FinishWeixinpay, newData.FinishAccountpay, newData.Status, newData.WexinPaymentTime, newData.CashAccountPaymentTime, newData.LogId, newData.Id)
	return err
}

func (m *defaultTransactionInfoModel) UpdateWeixinPay(ctx context.Context, OrderSn, transactionid string) error {
	query := fmt.Sprintf("update %s set `finish_weixinpay`=1,`wexin_payment_time`=?,`transaction_id`=? where `order_sn` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, time.Now(), OrderSn, transactionid)
	return err
}

func (m *defaultTransactionInfoModel) UpdateCashPay(ctx context.Context, OrderSn string) error {
	query := fmt.Sprintf("update %s set `finish_accountpay`=1,`cash_account_payment_time`=? where `order_sn` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, time.Now(), OrderSn)
	return err
}

func (m *defaultTransactionInfoModel) UpdateWeixinReject(ctx context.Context, OrderSn string) error {
	query := fmt.Sprintf("update %s set `finish_weixinpay`=-1 where `order_sn` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, OrderSn)
	return err
}

func (m *defaultTransactionInfoModel) UpdateCashReject(ctx context.Context, OrderSn string) error {
	query := fmt.Sprintf("update %s set `finish_accountpay`=-1 where `order_sn` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, OrderSn)
	return err
}

func (m *defaultTransactionInfoModel) UpdateAllReject(ctx context.Context, OrderSn string) error {
	query := fmt.Sprintf("update %s set `status`=-1 where `order_sn` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, OrderSn)
	return err
}
func (m *defaultTransactionInfoModel) UpdateAllPay(ctx context.Context, OrderSn string) error {
	query := fmt.Sprintf("update %s set `status`=1 where `order_sn` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, OrderSn)
	return err
}

func (m *defaultTransactionInfoModel) tableName() string {
	return m.table
}
