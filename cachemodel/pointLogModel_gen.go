// Code generated by goctl. DO NOT EDIT!

package cachemodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pointLogFieldNames          = builder.RawFieldNames(&PointLog{})
	pointLogRows                = strings.Join(pointLogFieldNames, ",")
	pointLogRowsExpectAutoSet   = strings.Join(stringx.Remove(pointLogFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	pointLogRowsWithPlaceHolder = strings.Join(stringx.Remove(pointLogFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	pointLogModel interface {
		Insert(ctx context.Context, data *PointLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PointLog, error)
		Update(ctx context.Context, data *PointLog) error
		Delete(ctx context.Context, id int64) error
		FindAllByPhone(ctx context.Context, phone string) ([]*PointLog, error)
	}

	defaultPointLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PointLog struct {
		Id            int64     `db:"id"`
		Phone         string    `db:"phone"`          // 手机号账号
		ChangeAmount  int64     `db:"change_amount"`  // 变动数量
		Balance       int64     `db:"balance"`        // 剩余积分
		Behavior      string    `db:"behavior"`       // 行为
		OrderType     string    `db:"order_type"`     // 订单类型
		OrderSn       string    `db:"order_sn"`       // 订单号
		OrderDescribe string    `db:"order_describe"` // 订单描述
		Date          time.Time `db:"date"`           // 日志时间
	}
)

func newPointLogModel(conn sqlx.SqlConn) *defaultPointLogModel {
	return &defaultPointLogModel{
		conn:  conn,
		table: "`point_log`",
	}
}

func (m *defaultPointLogModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}
func (m *defaultPointLogModel) FindAllByPhone(ctx context.Context, phone string) ([]*PointLog, error) {
	query := fmt.Sprintf("select %s from %s where `phone` = ? limit 100", pointLogRows, m.table)
	var resp []*PointLog
	err := m.conn.QueryRowsCtx(ctx, &resp, query, phone)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultPointLogModel) FindOne(ctx context.Context, id int64) (*PointLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pointLogRows, m.table)
	var resp PointLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPointLogModel) Insert(ctx context.Context, data *PointLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, pointLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Phone, data.ChangeAmount, data.Balance, data.Behavior, data.OrderType, data.OrderSn, data.OrderDescribe, data.Date)
	return ret, err
}

func (m *defaultPointLogModel) Update(ctx context.Context, data *PointLog) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pointLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Phone, data.ChangeAmount, data.Balance, data.Behavior, data.OrderType, data.OrderSn, data.OrderDescribe, data.Date, data.Id)
	return err
}

func (m *defaultPointLogModel) tableName() string {
	return m.table
}
