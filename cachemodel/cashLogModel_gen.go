// Code generated by goctl. DO NOT EDIT!

package cachemodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	cashLogFieldNames          = builder.RawFieldNames(&CashLog{})
	cashLogRows                = strings.Join(cashLogFieldNames, ",")
	cashLogRowsExpectAutoSet   = strings.Join(stringx.Remove(cashLogFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	cashLogRowsWithPlaceHolder = strings.Join(stringx.Remove(cashLogFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	cashLogModel interface {
		Insert(ctx context.Context, data *CashLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CashLog, error)
		Update(ctx context.Context, data *CashLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCashLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	CashLog struct {
		Id           int64     `db:"id"`
		Phone        string    `db:"phone"`         // 手机号账号
		ChangeAmount int64     `db:"change_amount"` // 变动金额
		Balance      int64     `db:"balance"`       // 余额
		Behavior     string    `db:"behavior"`      // 行为
		Date         time.Time `db:"date"`          // 日志时间
	}
)

func newCashLogModel(conn sqlx.SqlConn) *defaultCashLogModel {
	return &defaultCashLogModel{
		conn:  conn,
		table: "`cash_log`",
	}
}

func (m *defaultCashLogModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCashLogModel) FindOne(ctx context.Context, id int64) (*CashLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", cashLogRows, m.table)
	var resp CashLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCashLogModel) Insert(ctx context.Context, data *CashLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, cashLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Phone, data.ChangeAmount, data.Balance, data.Behavior, data.Date)
	return ret, err
}

func (m *defaultCashLogModel) Update(ctx context.Context, data *CashLog) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, cashLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Phone, data.ChangeAmount, data.Balance, data.Behavior, data.Date, data.Id)
	return err
}

func (m *defaultCashLogModel) tableName() string {
	return m.table
}
