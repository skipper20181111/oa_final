// Code generated by goctl. DO NOT EDIT!

package cachemodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userOrderFieldNames          = builder.RawFieldNames(&UserOrder{})
	userOrderRows                = strings.Join(userOrderFieldNames, ",")
	userOrderRowsExpectAutoSet   = strings.Join(stringx.Remove(userOrderFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	userOrderRowsWithPlaceHolder = strings.Join(stringx.Remove(userOrderFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	userOrderModel interface {
		Insert(ctx context.Context, data *UserOrder) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserOrder, error)
		FindOneByOrderSn(ctx context.Context, orderSn string) (*UserOrder, error)
		FindOneByOutTradeNo(ctx context.Context, outTradeNo string) (*UserOrder, error)
		Update(ctx context.Context, data *UserOrder) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserOrderModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserOrder struct {
		Id                int64     `db:"id"`                  // id
		Phone             string    `db:"phone"`               // 账户手机号
		OrderSn           string    `db:"order_sn"`            // 订单编号
		OutTradeNo        string    `db:"out_trade_no"`        // 微信交易编号
		TransactionId     string    `db:"transaction_id"`      // 微信支付编号
		CreateOrderTime   time.Time `db:"create_order_time"`   // 订单产生时间
		Pidlist           string    `db:"pidlist"`             // 订单商品列表
		OriginalAmount    float64   `db:"original_amount"`     // 原始金额
		PayAmount         float64   `db:"pay_amount"`          // 实际支付金额
		FreightAmount     float64   `db:"freight_amount"`      // 运费金额
		PromotionAmount   float64   `db:"promotion_amount"`    // 促销优化金额（促销价、满减、阶梯价）
		IntegrationAmount float64   `db:"integration_amount"`  // 积分抵扣金额
		CouponAmount      float64   `db:"coupon_amount"`       // 优惠券抵扣金额
		OrderStatus       int64     `db:"order_status"`        // 订单状态：0->待付款；1->待发货；2->已发货；3->已完成；4->已关闭；5->无效订单 6:退货
		DeliveryCompany   string    `db:"delivery_company"`    // 物流公司(配送方式)
		DeliverySn        string    `db:"delivery_sn"`         // 物流单号
		AutoConfirmDay    int64     `db:"auto_confirm_day"`    // 自动确认时间（天）
		Integration       int64     `db:"integration"`         // 可以获得的积分
		Growth            int64     `db:"growth"`              // 可以活动的成长值
		BillType          int64     `db:"bill_type"`           // 发票类型：0->不开发票；1->电子发票；2->纸质发票
		BillHeader        string    `db:"bill_header"`         // 发票抬头
		BillContent       string    `db:"bill_content"`        // 发票内容
		BillReceiverPhone string    `db:"bill_receiver_phone"` // 收票人电话
		BillReceiverEmail string    `db:"bill_receiver_email"` // 收票人邮箱
		ReceiverInfo      string    `db:"receiver_info"`       // 收货人信息
		Note              string    `db:"note"`                // 订单备注
		ConfirmStatus     int64     `db:"confirm_status"`      // 确认收货状态：0->未确认；1->已确认
		DeleteStatus      int64     `db:"delete_status"`       // 删除状态：0->未删除；1->已删除
		UseIntegration    int64     `db:"use_integration"`     // 下单时使用的积分
		PaymentTime       time.Time `db:"payment_time"`        // 支付时间
		DeliveryTime      time.Time `db:"delivery_time"`       // 发货时间
		ReceiveTime       time.Time `db:"receive_time"`        // 确认收货时间
		CommentTime       time.Time `db:"comment_time"`        // 评价时间
		ModifyTime        time.Time `db:"modify_time"`         // 修改时间
	}
)

func newUserOrderModel(conn sqlx.SqlConn) *defaultUserOrderModel {
	return &defaultUserOrderModel{
		conn:  conn,
		table: "`user_order`",
	}
}

func (m *defaultUserOrderModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserOrderModel) FindOne(ctx context.Context, id int64) (*UserOrder, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userOrderRows, m.table)
	var resp UserOrder
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserOrderModel) FindOneByOrderSn(ctx context.Context, orderSn string) (*UserOrder, error) {
	var resp UserOrder
	query := fmt.Sprintf("select %s from %s where `order_sn` = ? limit 1", userOrderRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, orderSn)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserOrderModel) FindOneByOutTradeNo(ctx context.Context, outTradeNo string) (*UserOrder, error) {
	var resp UserOrder
	query := fmt.Sprintf("select %s from %s where `out_trade_no` = ? limit 1", userOrderRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, outTradeNo)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserOrderModel) Insert(ctx context.Context, data *UserOrder) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userOrderRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Phone, data.OrderSn, data.OutTradeNo, data.TransactionId, data.CreateOrderTime, data.Pidlist, data.OriginalAmount, data.PayAmount, data.FreightAmount, data.PromotionAmount, data.IntegrationAmount, data.CouponAmount, data.OrderStatus, data.DeliveryCompany, data.DeliverySn, data.AutoConfirmDay, data.Integration, data.Growth, data.BillType, data.BillHeader, data.BillContent, data.BillReceiverPhone, data.BillReceiverEmail, data.ReceiverInfo, data.Note, data.ConfirmStatus, data.DeleteStatus, data.UseIntegration, data.PaymentTime, data.DeliveryTime, data.ReceiveTime, data.CommentTime, data.ModifyTime)
	return ret, err
}

func (m *defaultUserOrderModel) Update(ctx context.Context, newData *UserOrder) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userOrderRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Phone, newData.OrderSn, newData.OutTradeNo, newData.TransactionId, newData.CreateOrderTime, newData.Pidlist, newData.OriginalAmount, newData.PayAmount, newData.FreightAmount, newData.PromotionAmount, newData.IntegrationAmount, newData.CouponAmount, newData.OrderStatus, newData.DeliveryCompany, newData.DeliverySn, newData.AutoConfirmDay, newData.Integration, newData.Growth, newData.BillType, newData.BillHeader, newData.BillContent, newData.BillReceiverPhone, newData.BillReceiverEmail, newData.ReceiverInfo, newData.Note, newData.ConfirmStatus, newData.DeleteStatus, newData.UseIntegration, newData.PaymentTime, newData.DeliveryTime, newData.ReceiveTime, newData.CommentTime, newData.ModifyTime, newData.Id)
	return err
}

func (m *defaultUserOrderModel) tableName() string {
	return m.table
}

func (m *defaultUserOrderModel) FindAllByPhone(ctx context.Context, phone string) ([]*UserOrder, error) {
	query := fmt.Sprintf("select %s from %s where `phone` = ? ", userOrderRows, m.table)
	var resp = make([]*UserOrder, 0)
	err := m.conn.QueryRowsCtx(ctx, &resp, query, phone)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
