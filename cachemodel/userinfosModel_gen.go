// Code generated by goctl. DO NOT EDIT!

package cachemodel

import (
	"context"
	"database/sql"
	"fmt"
	"math/rand"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	letters                      = []rune("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ")
	userinfosFieldNames          = builder.RawFieldNames(&Userinfos{})
	userinfosRows                = strings.Join(userinfosFieldNames, ",")
	userinfosRowsExpectAutoSet   = strings.Join(stringx.Remove(userinfosFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	userinfosRowsWithPlaceHolder = strings.Join(stringx.Remove(userinfosFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	userinfosModel interface {
		Insert(ctx context.Context, data *Userinfos) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Userinfos, error)
		FindOneByOpenid(ctx context.Context, openid string) (*Userinfos, error)
		FindOneByPhone(ctx context.Context, phone string) (*Userinfos, error)
		Update(ctx context.Context, data *Userinfos) error
		Delete(ctx context.Context, id uint64) error
		UnBoundOpenId(ctx context.Context, openid string) error
	}

	defaultUserinfosModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Userinfos struct {
		Id       uint64 `db:"id"`
		NickName string `db:"nick_name"` // 用户昵称
		Avatar   string `db:"avatar"`    // 用户头像
		Gender   int64  `db:"gender"`    // 性别
		Birthday string `db:"birthday"`  // 用户生日
		Region   string `db:"region"`    // 地址区位（静安区）
		Phone    string `db:"phone"`     // 账户手机号
		Openid   string `db:"openid"`    // 微信openid
	}
)

func newUserinfosModel(conn sqlx.SqlConn) *defaultUserinfosModel {
	return &defaultUserinfosModel{
		conn:  conn,
		table: "`userinfos`",
	}
}

func (m *defaultUserinfosModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserinfosModel) FindOne(ctx context.Context, id uint64) (*Userinfos, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userinfosRows, m.table)
	var resp Userinfos
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserinfosModel) FindOneByOpenid(ctx context.Context, openid string) (*Userinfos, error) {
	var resp Userinfos
	query := fmt.Sprintf("select %s from %s where `openid` = ? limit 1", userinfosRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, openid)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserinfosModel) FindOneByPhone(ctx context.Context, phone string) (*Userinfos, error) {
	var resp Userinfos
	query := fmt.Sprintf("select %s from %s where `phone` = ? limit 1", userinfosRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, phone)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserinfosModel) Insert(ctx context.Context, data *Userinfos) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, userinfosRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.NickName, data.Avatar, data.Gender, data.Birthday, data.Region, data.Phone, data.Openid)
	return ret, err
}

func (m *defaultUserinfosModel) Update(ctx context.Context, newData *Userinfos) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userinfosRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.NickName, newData.Avatar, newData.Gender, newData.Birthday, newData.Region, newData.Phone, newData.Openid, newData.Id)
	return err
}
func (m *defaultUserinfosModel) UnBoundOpenId(ctx context.Context, openid string) error {
	defer func() {
		if e := recover(); e != nil {
			return
		}
	}()
	query := fmt.Sprintf("update %s set `openid`=? where `openid` = ?", m.table, userinfosRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, randStr(128), openid)
	return err
}
func randStr(n int) string {
	b := make([]rune, n)
	for i := range b {
		b[i] = letters[rand.Intn(len(letters))]
	}
	return string(b)
}
func (m *defaultUserinfosModel) tableName() string {
	return m.table
}
