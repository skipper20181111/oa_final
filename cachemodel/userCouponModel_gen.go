// Code generated by goctl. DO NOT EDIT!

package cachemodel

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userCouponFieldNames          = builder.RawFieldNames(&UserCoupon{})
	userCouponRows                = strings.Join(userCouponFieldNames, ",")
	userCouponRowsExpectAutoSet   = strings.Join(stringx.Remove(userCouponFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	userCouponRowsWithPlaceHolder = strings.Join(stringx.Remove(userCouponFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheDevUserCouponIdPrefix    = "cache:dev:userCoupon:id:"
	cacheDevUserCouponPhonePrefix = "cache:dev:userCoupon:phone:"
)

type (
	userCouponModel interface {
		Insert(ctx context.Context, data *UserCoupon) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserCoupon, error)
		FindOneByPhone(ctx context.Context, phone string) (*UserCoupon, error)
		Update(ctx context.Context, data *UserCoupon) error
		Delete(ctx context.Context, id int64) error
		FindOneByPhoneNoCache(ctx context.Context, phone string) (*UserCoupon, error)
	}

	defaultUserCouponModel struct {
		sqlc.CachedConn
		table string
	}

	UserCoupon struct {
		Id           int64  `db:"id"`
		CouponIdList string `db:"coupon_id_list"` // 优惠券列表[id:拥有数量],后领取的靠前排列
		Phone        string `db:"phone"`          // 领取人账号
	}
)

func newUserCouponModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserCouponModel {
	return &defaultUserCouponModel{
		CachedConn: sqlc.NewConn(conn, c, cache.WithExpiry(time.Second*5)),
		table:      "`user_coupon`",
	}
}

func (m *defaultUserCouponModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	devUserCouponIdKey := fmt.Sprintf("%s%v", cacheDevUserCouponIdPrefix, id)
	devUserCouponPhoneKey := fmt.Sprintf("%s%v", cacheDevUserCouponPhonePrefix, data.Phone)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, devUserCouponIdKey, devUserCouponPhoneKey)
	return err
}

func (m *defaultUserCouponModel) FindOne(ctx context.Context, id int64) (*UserCoupon, error) {
	devUserCouponIdKey := fmt.Sprintf("%s%v", cacheDevUserCouponIdPrefix, id)
	var resp UserCoupon
	err := m.QueryRowCtx(ctx, &resp, devUserCouponIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userCouponRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, errors.New("notfind")
	default:
		return nil, err
	}
}

func (m *defaultUserCouponModel) FindOneByPhone(ctx context.Context, phone string) (*UserCoupon, error) {
	devUserCouponPhoneKey := fmt.Sprintf("%s%v", cacheDevUserCouponPhonePrefix, phone)
	var resp UserCoupon
	err := m.QueryRowIndexCtx(ctx, &resp, devUserCouponPhoneKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `phone` = ? limit 1", userCouponRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, phone); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserCouponModel) Insert(ctx context.Context, data *UserCoupon) (sql.Result, error) {
	devUserCouponIdKey := fmt.Sprintf("%s%v", cacheDevUserCouponIdPrefix, data.Id)
	devUserCouponPhoneKey := fmt.Sprintf("%s%v", cacheDevUserCouponPhonePrefix, data.Phone)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, userCouponRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CouponIdList, data.Phone)
	}, devUserCouponIdKey, devUserCouponPhoneKey)
	return ret, err
}

func (m *defaultUserCouponModel) Update(ctx context.Context, newData *UserCoupon) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	devUserCouponIdKey := fmt.Sprintf("%s%v", cacheDevUserCouponIdPrefix, data.Id)
	devUserCouponPhoneKey := fmt.Sprintf("%s%v", cacheDevUserCouponPhonePrefix, data.Phone)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userCouponRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.CouponIdList, newData.Phone, newData.Id)
	}, devUserCouponIdKey, devUserCouponPhoneKey)
	return err
}

func (m *defaultUserCouponModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheDevUserCouponIdPrefix, primary)
}

func (m *defaultUserCouponModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userCouponRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserCouponModel) tableName() string {
	return m.table
}

func (m *defaultUserCouponModel) FindOneByPhoneNoCache(ctx context.Context, phone string) (*UserCoupon, error) {
	var resp UserCoupon
	query := fmt.Sprintf("select %s from %s where `phone` = ? limit 1", userCouponRows, m.table)
	err := m.QueryRowNoCacheCtx(ctx, &resp, query, phone)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
