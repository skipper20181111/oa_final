// Code generated by goctl. DO NOT EDIT!

package cachemodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productFieldNames          = builder.RawFieldNames(&Product{})
	productRows                = strings.Join(productFieldNames, ",")
	productRowsExpectAutoSet   = strings.Join(stringx.Remove(productFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	productRowsWithPlaceHolder = strings.Join(stringx.Remove(productFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheDevProductIdPrefix  = "cache:dev:product:id:"
	cacheDevProductPidPrefix = "cache:dev:product:pid:"
)

type (
	productModel interface {
		Insert(ctx context.Context, data *Product) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Product, error)
		FindOneByPid(ctx context.Context, pid int64) (*Product, error)
		Update(ctx context.Context, data *Product) error
		Delete(ctx context.Context, id int64) error
		FindAll(ctx context.Context) ([]*Product, error)
	}

	defaultProductModel struct {
		sqlc.CachedConn
		table string
	}

	Product struct {
		Id                  int64     `db:"id"`
		Pid                 int64     `db:"pid"`
		Grade               int64     `db:"grade"` // 0->普通商品，1->礼品级
		ProductCategoryId   int64     `db:"product_category_id"`
		ProductTitle        string    `db:"product_title"` // 商品主标题
		Picture             string    `db:"picture"`
		Status              int64     `db:"status"`       // 上架状态：0->正常，1->下架，2->预约商品
		ReserveTime         time.Time `db:"reserve_time"` // 预售开始时间
		Sale                int64     `db:"sale"`         // 销量
		Price               float64   `db:"price"`
		PromotionPrice      float64   `db:"promotion_price"`       // 促销价格
		OriginalPrice       float64   `db:"original_price"`        // 市场价
		CutPrice            float64   `db:"cut_price"`             // 相比上月平均价格下降了多少
		Description         string    `db:"description"`           // 商品描述
		Unit                string    `db:"unit"`                  // 单位
		Weight              float64   `db:"weight"`                // 商品重量，默认为克
		AlbumPics           string    `db:"album_pics"`            // 画册图片，连产品图片限制为5张，以逗号分割
		DetailTitle         string    `db:"detail_title"`          // 商品详情页的主标题
		DetailDesc          string    `db:"detail_desc"`           // 商品详情页的详细描述
		DetailMobileHtml    string    `db:"detail_mobile_html"`    // 移动端网页详情
		BrandName           string    `db:"brand_name"`            // 品牌名称
		ProductCategoryName string    `db:"product_category_name"` // 商品分类名称
		Attribute           string    `db:"attribute"`             // 商品属性名称
	}
)

func newProductModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultProductModel {
	return &defaultProductModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`product`",
	}
}

func (m *defaultProductModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	devProductIdKey := fmt.Sprintf("%s%v", cacheDevProductIdPrefix, id)
	devProductPidKey := fmt.Sprintf("%s%v", cacheDevProductPidPrefix, data.Pid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, devProductIdKey, devProductPidKey)
	return err
}

func (m *defaultProductModel) FindOne(ctx context.Context, id int64) (*Product, error) {
	devProductIdKey := fmt.Sprintf("%s%v", cacheDevProductIdPrefix, id)
	var resp Product
	err := m.QueryRowCtx(ctx, &resp, devProductIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductModel) FindAll(ctx context.Context) ([]*Product, error) {
	var productlist []*Product
	query := fmt.Sprintf("select %s from %s", productRows, m.table)
	err := m.QueryRowsNoCacheCtx(ctx, &productlist, query)
	return productlist, err
}

func (m *defaultProductModel) FindOneByPid(ctx context.Context, pid int64) (*Product, error) {
	devProductPidKey := fmt.Sprintf("%s%v", cacheDevProductPidPrefix, pid)
	var resp Product
	err := m.QueryRowIndexCtx(ctx, &resp, devProductPidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `pid` = ? limit 1", productRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, pid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductModel) Insert(ctx context.Context, data *Product) (sql.Result, error) {
	devProductIdKey := fmt.Sprintf("%s%v", cacheDevProductIdPrefix, data.Id)
	devProductPidKey := fmt.Sprintf("%s%v", cacheDevProductPidPrefix, data.Pid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, productRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Pid, data.Grade, data.ProductCategoryId, data.ProductTitle, data.Picture, data.Status, data.ReserveTime, data.Sale, data.Price, data.PromotionPrice, data.OriginalPrice, data.CutPrice, data.Description, data.Unit, data.Weight, data.AlbumPics, data.DetailTitle, data.DetailDesc, data.DetailMobileHtml, data.BrandName, data.ProductCategoryName, data.Attribute)
	}, devProductIdKey, devProductPidKey)
	return ret, err
}

func (m *defaultProductModel) Update(ctx context.Context, newData *Product) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	devProductIdKey := fmt.Sprintf("%s%v", cacheDevProductIdPrefix, data.Id)
	devProductPidKey := fmt.Sprintf("%s%v", cacheDevProductPidPrefix, data.Pid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, productRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Pid, newData.Grade, newData.ProductCategoryId, newData.ProductTitle, newData.Picture, newData.Status, newData.ReserveTime, newData.Sale, newData.Price, newData.PromotionPrice, newData.OriginalPrice, newData.CutPrice, newData.Description, newData.Unit, newData.Weight, newData.AlbumPics, newData.DetailTitle, newData.DetailDesc, newData.DetailMobileHtml, newData.BrandName, newData.ProductCategoryName, newData.Attribute, newData.Id)
	}, devProductIdKey, devProductPidKey)
	return err
}

func (m *defaultProductModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheDevProductIdPrefix, primary)
}

func (m *defaultProductModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultProductModel) tableName() string {
	return m.table
}
