// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	address "oa_final/internal/handler/address"
	associator "oa_final/internal/handler/associator"
	invoice "oa_final/internal/handler/invoice"
	payrecall "oa_final/internal/handler/payrecall"
	refresh "oa_final/internal/handler/refresh"
	shoppingcart "oa_final/internal/handler/shoppingcart"
	userorder "oa_final/internal/handler/userorder"
	"oa_final/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/preneworder",
				Handler: userorder.PreneworderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/neworder",
				Handler: userorder.NeworderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/starmallorder",
				Handler: userorder.StarmallorderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/cashrecharge",
				Handler: userorder.CashrechargeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/finishorder",
				Handler: userorder.FinishorderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/continuepay",
				Handler: userorder.ContinuepayHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/paybill",
				Handler: userorder.PaybillHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getallorder",
				Handler: userorder.GetallorderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getorder",
				Handler: userorder.GetorderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/changeorderaddress",
				Handler: userorder.ChangeorderaddressHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/cancelorder",
				Handler: userorder.CancelorderHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/userorder"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/getsc",
				Handler: shoppingcart.GetscHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/updatesc",
				Handler: shoppingcart.UpdatescHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/shoppingcart"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/updateaddress",
				Handler: address.UpdateaddressHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getaddress",
				Handler: address.GetaddressHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/address"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/refreshPL",
				Handler: refresh.RefreshPLHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/probe",
				Handler: refresh.ProbeHandler(serverCtx),
			},
		},
		rest.WithPrefix("/refresh"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/tellmeso",
				Handler: payrecall.TellmesoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/coupontellmeso",
				Handler: payrecall.CoupontellmesoHandler(serverCtx),
			},
		},
		rest.WithPrefix("/payrecall"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/getpoint",
				Handler: associator.GetpointHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/associator"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/applyinvoice",
				Handler: invoice.ApplyinvoiceHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getinvoice",
				Handler: invoice.GetinvoiceHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getallinvoice",
				Handler: invoice.GetallinvoiceHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/invoice"),
	)
}
