// Code generated by goctl. DO NOT EDIT!

package cachemodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	payInfoFieldNames          = builder.RawFieldNames(&PayInfo{})
	payInfoRows                = strings.Join(payInfoFieldNames, ",")
	payInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(payInfoFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	payInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(payInfoFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	payInfoModel interface {
		Insert(ctx context.Context, data *PayInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PayInfo, error)
		FindOneByOutTradeNo(ctx context.Context, outTradeNo string) (*PayInfo, error)
		Update(ctx context.Context, data *PayInfo) error
		Delete(ctx context.Context, id int64) error
		UpdateWeixinReject(ctx context.Context, RefundAmount int64, OutTradeNo string) error
		UpdateCashReject(ctx context.Context, RefundAmount int64, OutTradeNo string) error
		UpdateWeixinPay(ctx context.Context, OutTradeNo, TransactionId string) error
		UpdateAllPay(ctx context.Context, OutTradeNo string) error
		UpdateCashPay(ctx context.Context, OutTradeNo string) error
		FindAllByPhone(ctx context.Context, phone string, pagenumber int) ([]*PayInfo, error)
		UpdateStatus(ctx context.Context, OutTradeNo string, Status int64) error
		FindStatus0(ctx context.Context) ([]*PayInfo, error)
		FindStatus1(ctx context.Context) ([]*PayInfo, error)
		FindStatus4(ctx context.Context, pagenumber int) ([]*PayInfo, error)
		UpdateInvoiceStatus(ctx context.Context, OutTradeNo string, Status int64) error
		UpdateWeChatDelivered(ctx context.Context, OutTradeNo string) error
		UpdateWeChatDelivering(ctx context.Context, OutTradeNo string) error
		UpdateInvoice(ctx context.Context, OutTradeNo string, status int64) error
		FindStatus4Invoice(ctx context.Context, pagenumber int) ([]*PayInfo, error)
	}

	defaultPayInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PayInfo struct {
		Id                      int64     `db:"id"`                         // id
		Phone                   string    `db:"phone"`                      // 账户手机号
		OutTradeNo              string    `db:"out_trade_no"`               // 微信交易编号
		TransactionType         string    `db:"transaction_type"`           // 交易种类
		TransactionId           string    `db:"transaction_id"`             // 微信支付编号
		CreateOrderTime         time.Time `db:"create_order_time"`          // 订单产生时间
		Pidlist                 string    `db:"pidlist"`                    // 订单商品列表
		TotleAmount             int64     `db:"totle_amount"`               // 总金额
		WexinPayAmount          int64     `db:"wexin_pay_amount"`           // 微信支付金额
		CashAccountPayAmount    int64     `db:"cash_account_pay_amount"`    // 现金账户支付金额
		WexinRefundAmount       int64     `db:"wexin_refund_amount"`        // 微信退款金额
		CashAccountRefundAmount int64     `db:"cash_account_refund_amount"` // 现金账户退款金额
		FinishWeixinpay         int64     `db:"finish_weixinpay"`           // 是否完成微信支付
		FinishAccountpay        int64     `db:"finish_accountpay"`          // 是否完成账户支付
		Status                  int64     `db:"status"`                     // 0->未完成；1->已完成；2->部分退款;3->全部退款，4->全部已收货
		InvoiceStatus           int64     `db:"invoice_status"`             // 处理：1->已填信息预开票状态；2->开票中；3->开票完成；4->开票失败
		WexinPaymentTime        time.Time `db:"wexin_payment_time"`         // 微信支付时间
		CashAccountPaymentTime  time.Time `db:"cash_account_payment_time"`  // 现金账户支付时间
		LogId                   int64     `db:"log_id"`
		WexinDeliveryStatus     int64     `db:"wexin_delivery_status"` // 0->未发货，(1) 待发货；(2) 已发货；(3) 确认收货；(4) 交易完成；(5) 已退款。
		WexinDeliveryTime       time.Time `db:"wexin_delivery_time"`   // 微信支付时间
	}
)

func newPayInfoModel(conn sqlx.SqlConn) *defaultPayInfoModel {
	return &defaultPayInfoModel{
		conn:  conn,
		table: "`pay_info`",
	}
}

func (m *defaultPayInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPayInfoModel) FindOne(ctx context.Context, id int64) (*PayInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", payInfoRows, m.table)
	var resp PayInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPayInfoModel) FindOneByOutTradeNo(ctx context.Context, outTradeNo string) (*PayInfo, error) {
	var resp PayInfo
	query := fmt.Sprintf("select %s from %s where `out_trade_no` = ? limit 1", payInfoRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, outTradeNo)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPayInfoModel) Insert(ctx context.Context, data *PayInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, payInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Phone, data.OutTradeNo, data.TransactionType, data.TransactionId, data.CreateOrderTime, data.Pidlist, data.TotleAmount, data.WexinPayAmount, data.CashAccountPayAmount, data.WexinRefundAmount, data.CashAccountRefundAmount, data.FinishWeixinpay, data.FinishAccountpay, data.Status, data.InvoiceStatus, data.WexinPaymentTime, data.CashAccountPaymentTime, data.LogId, data.WexinDeliveryStatus, data.WexinDeliveryTime)
	return ret, err
}

func (m *defaultPayInfoModel) Update(ctx context.Context, newData *PayInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, payInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Phone, newData.OutTradeNo, newData.TransactionType, newData.TransactionId, newData.CreateOrderTime, newData.Pidlist, newData.TotleAmount, newData.WexinPayAmount, newData.CashAccountPayAmount, newData.WexinRefundAmount, newData.CashAccountRefundAmount, newData.FinishWeixinpay, newData.FinishAccountpay, newData.Status, newData.InvoiceStatus, newData.WexinPaymentTime, newData.CashAccountPaymentTime, newData.LogId, newData.WexinDeliveryStatus, newData.WexinDeliveryTime, newData.Id)
	return err
}

func (m *defaultPayInfoModel) FindAllByPhone(ctx context.Context, phone string, pagenumber int) ([]*PayInfo, error) {
	if pagenumber <= 0 || pagenumber > 7 {
		return make([]*PayInfo, 0), nil
	}
	sheetlen := 5
	offset := sheetlen * (pagenumber - 1)
	query := fmt.Sprintf("select %s from %s where `phone` = ? and `status`<>8 and `status`<>9  order by `create_order_time` desc  limit ? OFFSET ?", payInfoRows, m.table)
	var resp []*PayInfo
	err := m.conn.QueryRowsCtx(ctx, &resp, query, phone, sheetlen, offset)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultPayInfoModel) FindStatus4Invoice(ctx context.Context, pagenumber int) ([]*PayInfo, error) {
	if pagenumber <= 0 || pagenumber > 7 {
		return make([]*PayInfo, 0), nil
	}
	sheetlen := 5
	offset := sheetlen * (pagenumber - 1)
	var resp []*PayInfo
	query := fmt.Sprintf("select %s from %s where `status` = 4 and `invoice_status`=0 order by `create_order_time` desc  limit ? OFFSET ?", payInfoRows, m.table)
	err := m.conn.QueryRowsCtx(ctx, &resp, query, sheetlen, offset)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultPayInfoModel) FindStatus4(ctx context.Context, pagenumber int) ([]*PayInfo, error) {
	if pagenumber <= 0 || pagenumber > 7 {
		return make([]*PayInfo, 0), nil
	}
	sheetlen := 5
	offset := sheetlen * (pagenumber - 1)
	var resp []*PayInfo
	query := fmt.Sprintf("select %s from %s where `status` = 4 order by `create_order_time` desc  limit ? OFFSET ?", payInfoRows, m.table)
	err := m.conn.QueryRowsCtx(ctx, &resp, query, sheetlen, offset)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultPayInfoModel) FindStatus1(ctx context.Context) ([]*PayInfo, error) {
	var resp []*PayInfo
	query := fmt.Sprintf("select %s from %s where `status` = 1", payInfoRows, m.table)
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultPayInfoModel) FindStatus0(ctx context.Context) ([]*PayInfo, error) {
	var resp []*PayInfo
	query := fmt.Sprintf("select %s from %s where `status` = 0", payInfoRows, m.table)
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPayInfoModel) UpdateWeixinReject(ctx context.Context, RefundAmount int64, OutTradeNo string) error {
	query := fmt.Sprintf("update %s set `wexin_refund_amount`=`wexin_refund_amount`+? where `out_trade_no` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, RefundAmount, OutTradeNo)
	return err
}
func (m *defaultPayInfoModel) UpdateCashReject(ctx context.Context, RefundAmount int64, OutTradeNo string) error {
	query := fmt.Sprintf("update %s set `cash_account_refund_amount`=`cash_account_refund_amount`+? where `out_trade_no` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, RefundAmount, OutTradeNo)
	return err
}
func (m *defaultPayInfoModel) UpdateWeixinPay(ctx context.Context, OutTradeNo, TransactionId string) error {
	query := fmt.Sprintf("update %s set `finish_weixinpay`=1,`transaction_id`=?,`wexin_payment_time`=? where `out_trade_no` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, TransactionId, time.Now(), OutTradeNo)
	return err
}
func (m *defaultPayInfoModel) UpdateStatus(ctx context.Context, OutTradeNo string, Status int64) error {
	query := fmt.Sprintf("update %s set `status`=? where `out_trade_no` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, Status, OutTradeNo)
	return err
}
func (m *defaultPayInfoModel) UpdateInvoiceStatus(ctx context.Context, OutTradeNo string, Status int64) error {
	query := fmt.Sprintf("update %s set `invoice_status`=? where `out_trade_no` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, Status, OutTradeNo)
	return err
}
func (m *defaultPayInfoModel) UpdateCashPay(ctx context.Context, OutTradeNo string) error {
	query := fmt.Sprintf("update %s set `finish_accountpay`=1,`cash_account_payment_time`=? where `out_trade_no` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, time.Now(), OutTradeNo)
	return err
}

func (m *defaultPayInfoModel) UpdateAllPay(ctx context.Context, OutTradeNo string) error {
	query := fmt.Sprintf("update %s set `status`=1 where `out_trade_no` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, OutTradeNo)
	return err
}

func (m *defaultPayInfoModel) UpdateWeChatDelivering(ctx context.Context, OutTradeNo string) error {
	query := fmt.Sprintf("update %s set `wexin_delivery_status`=2,`wexin_delivery_time`=? where `out_trade_no` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, time.Now(), OutTradeNo)
	return err
}

func (m *defaultPayInfoModel) UpdateWeChatDelivered(ctx context.Context, OutTradeNo string) error {
	query := fmt.Sprintf("update %s set `wexin_delivery_status`=3,`wexin_delivery_time`=?  where `out_trade_no` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, time.Now(), OutTradeNo)
	return err
}
func (m *defaultPayInfoModel) UpdateInvoice(ctx context.Context, OutTradeNo string, status int64) error {
	query := fmt.Sprintf("update %s set `invoice_status`=? where `out_trade_no` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, status, OutTradeNo)
	return err
}

func (m *defaultPayInfoModel) tableName() string {
	return m.table
}
