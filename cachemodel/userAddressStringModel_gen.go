// Code generated by goctl. DO NOT EDIT!

package cachemodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userAddressStringFieldNames          = builder.RawFieldNames(&UserAddressString{})
	userAddressStringRows                = strings.Join(userAddressStringFieldNames, ",")
	userAddressStringRowsExpectAutoSet   = strings.Join(stringx.Remove(userAddressStringFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	userAddressStringRowsWithPlaceHolder = strings.Join(stringx.Remove(userAddressStringFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheDevUserAddressStringIdPrefix    = "cache:dev:userAddressString:id:"
	cacheDevUserAddressStringPhonePrefix = "cache:dev:userAddressString:phone:"
)

type (
	userAddressStringModel interface {
		Insert(ctx context.Context, data *UserAddressString) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserAddressString, error)
		FindOneByPhone(ctx context.Context, phone string) (*UserAddressString, error)
		Update(ctx context.Context, data *UserAddressString) error
		Delete(ctx context.Context, id int64) error
		UpdateByPhone(ctx context.Context, newData *UserAddressString) error
	}

	defaultUserAddressStringModel struct {
		sqlc.CachedConn
		table string
	}

	UserAddressString struct {
		Id            int64  `db:"id"`
		Phone         string `db:"phone"`
		AddressString string `db:"address_string"`
	}
)

func newUserAddressStringModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserAddressStringModel {
	return &defaultUserAddressStringModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user_address_string`",
	}
}

func (m *defaultUserAddressStringModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	devUserAddressStringIdKey := fmt.Sprintf("%s%v", cacheDevUserAddressStringIdPrefix, id)
	devUserAddressStringPhoneKey := fmt.Sprintf("%s%v", cacheDevUserAddressStringPhonePrefix, data.Phone)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, devUserAddressStringIdKey, devUserAddressStringPhoneKey)
	return err
}

func (m *defaultUserAddressStringModel) FindOne(ctx context.Context, id int64) (*UserAddressString, error) {
	devUserAddressStringIdKey := fmt.Sprintf("%s%v", cacheDevUserAddressStringIdPrefix, id)
	var resp UserAddressString
	err := m.QueryRowCtx(ctx, &resp, devUserAddressStringIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userAddressStringRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserAddressStringModel) FindOneByPhone(ctx context.Context, phone string) (*UserAddressString, error) {
	devUserAddressStringPhoneKey := fmt.Sprintf("%s%v", cacheDevUserAddressStringPhonePrefix, phone)
	var resp UserAddressString
	err := m.QueryRowIndexCtx(ctx, &resp, devUserAddressStringPhoneKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `phone` = ? limit 1", userAddressStringRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, phone); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserAddressStringModel) Insert(ctx context.Context, data *UserAddressString) (sql.Result, error) {
	devUserAddressStringIdKey := fmt.Sprintf("%s%v", cacheDevUserAddressStringIdPrefix, data.Id)
	devUserAddressStringPhoneKey := fmt.Sprintf("%s%v", cacheDevUserAddressStringPhonePrefix, data.Phone)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, userAddressStringRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Phone, data.AddressString)
	}, devUserAddressStringIdKey, devUserAddressStringPhoneKey)
	return ret, err
}

func (m *defaultUserAddressStringModel) UpdateByPhone(ctx context.Context, newData *UserAddressString) error {
	data, err := m.FindOneByPhone(ctx, newData.Phone)
	if err != nil {
		return err
	}

	devUserAddressStringIdKey := fmt.Sprintf("%s%v", cacheDevUserAddressStringIdPrefix, data.Id)
	devUserAddressStringPhoneKey := fmt.Sprintf("%s%v", cacheDevUserAddressStringPhonePrefix, data.Phone)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userAddressStringRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Phone, newData.AddressString, data.Id)
	}, devUserAddressStringIdKey, devUserAddressStringPhoneKey)
	return err
}

func (m *defaultUserAddressStringModel) Update(ctx context.Context, newData *UserAddressString) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	devUserAddressStringIdKey := fmt.Sprintf("%s%v", cacheDevUserAddressStringIdPrefix, data.Id)
	devUserAddressStringPhoneKey := fmt.Sprintf("%s%v", cacheDevUserAddressStringPhonePrefix, data.Phone)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userAddressStringRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Phone, newData.AddressString, newData.Id)
	}, devUserAddressStringIdKey, devUserAddressStringPhoneKey)
	return err
}

func (m *defaultUserAddressStringModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheDevUserAddressStringIdPrefix, primary)
}

func (m *defaultUserAddressStringModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userAddressStringRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserAddressStringModel) tableName() string {
	return m.table
}
