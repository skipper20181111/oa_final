// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	address "oa_final/internal/handler/address"
	associator "oa_final/internal/handler/associator"
	coupon "oa_final/internal/handler/coupon"
	deliver "oa_final/internal/handler/deliver"
	invoice "oa_final/internal/handler/invoice"
	orderpay "oa_final/internal/handler/orderpay"
	payrecall "oa_final/internal/handler/payrecall"
	qrcode "oa_final/internal/handler/qrcode"
	refresh "oa_final/internal/handler/refresh"
	shoppingcart "oa_final/internal/handler/shoppingcart"
	"oa_final/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/getsfsn",
				Handler: deliver.GetsfsnHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/preparegoods",
				Handler: deliver.PreparegoodsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/prepareallgoods",
				Handler: deliver.PrepareallgoodsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/givesf",
				Handler: deliver.GivesfHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/downloadsfpdf",
				Handler: deliver.DownloadsfpdfHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getdelivering",
				Handler: deliver.GetdeliveringHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/downloaded",
				Handler: deliver.DownloadedHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/downloadfailed",
				Handler: deliver.DownloadfailedHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/printed",
				Handler: deliver.PrintedHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.AuthBackEnd.AccessSecret),
		rest.WithPrefix("/deliver"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/orderoption",
				Handler: orderpay.OrderoptionHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/neworder",
				Handler: orderpay.NeworderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/starmallorder",
				Handler: orderpay.StarmallorderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/cashrecharge",
				Handler: orderpay.CashrechargeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/changeorderaddress",
				Handler: orderpay.ChangeorderaddressHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/ifovertime",
				Handler: orderpay.IfovertimeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/refundorder",
				Handler: orderpay.RefundorderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/deleteorder",
				Handler: orderpay.DeleteorderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/finishorders",
				Handler: orderpay.FinishordersHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/continuepay",
				Handler: orderpay.ContinuepayHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/confirmorder",
				Handler: orderpay.ConfirmorderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getallorder",
				Handler: orderpay.GetallorderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getinvoiceorder",
				Handler: orderpay.GetinvoiceorderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getorder",
				Handler: orderpay.GetorderHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/orderpay"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/getsc",
				Handler: shoppingcart.GetscHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/updatesc",
				Handler: shoppingcart.UpdatescHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/shoppingcart"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/updateaddress",
				Handler: address.UpdateaddressHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getaddress",
				Handler: address.GetaddressHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getdefaultaddress",
				Handler: address.GetdefaultaddressHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/address"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/refreshPL",
				Handler: refresh.RefreshPLHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/probe",
				Handler: refresh.ProbeHandler(serverCtx),
			},
		},
		rest.WithPrefix("/refresh"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/tellmeso",
				Handler: payrecall.TellmesoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/coupontellmeso",
				Handler: payrecall.CoupontellmesoHandler(serverCtx),
			},
		},
		rest.WithPrefix("/payrecall"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/getpoint",
				Handler: associator.GetpointHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getpointlog",
				Handler: associator.GetpointlogHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/associator"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/applyinvoice",
				Handler: invoice.ApplyinvoiceHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getallinvoice",
				Handler: invoice.GetallinvoiceHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/updatetitle",
				Handler: invoice.UpdatetitleHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/gettitle",
				Handler: invoice.GettitleHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/invoice"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/getsmallcoupon",
				Handler: coupon.GetsmallcouponHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/starmallcouponorder",
				Handler: coupon.StarmallcouponorderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getvoucher",
				Handler: coupon.GetvoucherHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getmissioninfo",
				Handler: coupon.GetmissioninfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/finishmission",
				Handler: coupon.FinishmissionHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/coupon"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/scanqrcode",
				Handler: qrcode.ScanqrcodeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getqrcodetype",
				Handler: qrcode.GetqrcodetypeHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/qrcode"),
	)
}
