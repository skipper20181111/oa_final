// Code generated by goctl. DO NOT EDIT!

package cachemodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	invoiceFieldNames          = builder.RawFieldNames(&Invoice{})
	invoiceRows                = strings.Join(invoiceFieldNames, ",")
	invoiceRowsExpectAutoSet   = strings.Join(stringx.Remove(invoiceFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	invoiceRowsWithPlaceHolder = strings.Join(stringx.Remove(invoiceFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	invoiceModel interface {
		Insert(ctx context.Context, data *Invoice) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Invoice, error)
		FindOneByOrderSn(ctx context.Context, orderSn string) (*Invoice, error)
		Update(ctx context.Context, data *Invoice) error
		Delete(ctx context.Context, id int64) error
		FindAllByPhone(ctx context.Context, phone string) ([]*Invoice, error)
	}

	defaultInvoiceModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Invoice struct {
		Id             int64     `db:"id"`              // id
		Phone          string    `db:"phone"`           // 账户手机号
		OrderType      int64     `db:"order_type"`      // 订单类型
		OrderSn        string    `db:"order_sn"`        // 订单编号
		Type           int64     `db:"type"`            // 发票类型：0->增值税普通发票；1->增值税专用发票
		InvoiceTitle   string    `db:"invoice_title"`   // 发票抬头---公司名或个人姓名
		ComponyAddress string    `db:"compony_address"` // 公司地址
		ComponyPhone   string    `db:"compony_phone"`   // 公司电话
		TaxId          string    `db:"tax_id"`          // 公司税号
		OpeningBank    string    `db:"opening_bank"`    // 开户行
		BankAccount    string    `db:"bank_account"`    // 银行账号
		ApplyTime      time.Time `db:"apply_time"`      // 申请时间
		Status         int64     `db:"status"`          // 处理：0->待付款；1->已完成
		FinishTime     time.Time `db:"finish_time"`     // 完成时间
		LogId          int64     `db:"log_id"`
	}
)

func newInvoiceModel(conn sqlx.SqlConn) *defaultInvoiceModel {
	return &defaultInvoiceModel{
		conn:  conn,
		table: "`invoice`",
	}
}

func (m *defaultInvoiceModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultInvoiceModel) FindAllByPhone(ctx context.Context, phone string) ([]*Invoice, error) {
	query := fmt.Sprintf("select %s from %s where `phone` = ? limit 15", invoiceRows, m.table)
	var resp []*Invoice
	err := m.conn.QueryRowsCtx(ctx, &resp, query, phone)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInvoiceModel) FindOne(ctx context.Context, id int64) (*Invoice, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", invoiceRows, m.table)
	var resp Invoice
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInvoiceModel) FindOneByOrderSn(ctx context.Context, orderSn string) (*Invoice, error) {
	var resp Invoice
	query := fmt.Sprintf("select %s from %s where `order_sn` = ? limit 1", invoiceRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, orderSn)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInvoiceModel) Insert(ctx context.Context, data *Invoice) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, invoiceRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Phone, data.OrderType, data.OrderSn, data.Type, data.InvoiceTitle, data.ComponyAddress, data.ComponyPhone, data.TaxId, data.OpeningBank, data.BankAccount, data.ApplyTime, data.Status, data.FinishTime, data.LogId)
	return ret, err
}

func (m *defaultInvoiceModel) Update(ctx context.Context, newData *Invoice) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, invoiceRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Phone, newData.OrderType, newData.OrderSn, newData.Type, newData.InvoiceTitle, newData.ComponyAddress, newData.ComponyPhone, newData.TaxId, newData.OpeningBank, newData.BankAccount, newData.ApplyTime, newData.Status, newData.FinishTime, newData.LogId, newData.Id)
	return err
}

func (m *defaultInvoiceModel) tableName() string {
	return m.table
}
