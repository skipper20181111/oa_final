// Code generated by goctl. DO NOT EDIT!

package cachemodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	missionFieldNames          = builder.RawFieldNames(&Mission{})
	missionRows                = strings.Join(missionFieldNames, ",")
	missionRowsExpectAutoSet   = strings.Join(stringx.Remove(missionFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	missionRowsWithPlaceHolder = strings.Join(stringx.Remove(missionFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	missionModel interface {
		Insert(ctx context.Context, data *Mission) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Mission, error)
		FindOneByMissionId(ctx context.Context, missionId int64) (*Mission, error)
		Update(ctx context.Context, data *Mission) error
		Delete(ctx context.Context, id int64) error
		FindAll(ctx context.Context) ([]*Mission, error)
	}

	defaultMissionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Mission struct {
		Id           int64  `db:"id"`
		MissionId    int64  `db:"mission_id"`    // 任务id
		Describe     string `db:"describe"`      // 任务描述
		ConsumeCount int64  `db:"consume_count"` // 需要消费次数
	}
)

func newMissionModel(conn sqlx.SqlConn) *defaultMissionModel {
	return &defaultMissionModel{
		conn:  conn,
		table: "`mission`",
	}
}

func (m *defaultMissionModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}
func (m *defaultMissionModel) FindAll(ctx context.Context) ([]*Mission, error) {
	query := fmt.Sprintf("select %s from %s", missionRows, m.table)
	var resp []*Mission
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultMissionModel) FindOne(ctx context.Context, id int64) (*Mission, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", missionRows, m.table)
	var resp Mission
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMissionModel) FindOneByMissionId(ctx context.Context, missionId int64) (*Mission, error) {
	var resp Mission
	query := fmt.Sprintf("select %s from %s where `mission_id` = ? limit 1", missionRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, missionId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMissionModel) Insert(ctx context.Context, data *Mission) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, missionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.MissionId, data.Describe, data.ConsumeCount)
	return ret, err
}

func (m *defaultMissionModel) Update(ctx context.Context, newData *Mission) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, missionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.MissionId, newData.Describe, newData.ConsumeCount, newData.Id)
	return err
}

func (m *defaultMissionModel) tableName() string {
	return m.table
}
