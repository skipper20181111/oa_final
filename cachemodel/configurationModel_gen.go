// Code generated by goctl. DO NOT EDIT!

package cachemodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	configurationFieldNames          = builder.RawFieldNames(&Configuration{})
	configurationRows                = strings.Join(configurationFieldNames, ",")
	configurationRowsExpectAutoSet   = strings.Join(stringx.Remove(configurationFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	configurationRowsWithPlaceHolder = strings.Join(stringx.Remove(configurationFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	configurationModel interface {
		Insert(ctx context.Context, data *Configuration) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Configuration, error)
		Update(ctx context.Context, data *Configuration) error
		Delete(ctx context.Context, id int64) error
	}

	defaultConfigurationModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Configuration struct {
		Id       int64  `db:"id"`       // id
		Config   string `db:"config"`   // 配置
		Describe string `db:"describe"` // 配置项的用途
	}
)

func newConfigurationModel(conn sqlx.SqlConn) *defaultConfigurationModel {
	return &defaultConfigurationModel{
		conn:  conn,
		table: "`configuration`",
	}
}

func (m *defaultConfigurationModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultConfigurationModel) FindOne(ctx context.Context, id int64) (*Configuration, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", configurationRows, m.table)
	var resp Configuration
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultConfigurationModel) Insert(ctx context.Context, data *Configuration) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, configurationRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Config, data.Describe)
	return ret, err
}

func (m *defaultConfigurationModel) Update(ctx context.Context, data *Configuration) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, configurationRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Config, data.Describe, data.Id)
	return err
}

func (m *defaultConfigurationModel) tableName() string {
	return m.table
}
