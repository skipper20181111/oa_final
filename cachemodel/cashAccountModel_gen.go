// Code generated by goctl. DO NOT EDIT!

package cachemodel

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	cashAccountFieldNames          = builder.RawFieldNames(&CashAccount{})
	cashAccountRows                = strings.Join(cashAccountFieldNames, ",")
	cashAccountRowsExpectAutoSet   = strings.Join(stringx.Remove(cashAccountFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	cashAccountRowsWithPlaceHolder = strings.Join(stringx.Remove(cashAccountFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheDevCashAccountIdPrefix    = "cache:dev:cashAccount:id:"
	cacheDevCashAccountPhonePrefix = "cache:dev:cashAccount:phone:"
)

type (
	cashAccountModel interface {
		Insert(ctx context.Context, data *CashAccount) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CashAccount, error)
		FindOneByPhone(ctx context.Context, phone string) (*CashAccount, error)
		Update(ctx context.Context, data *CashAccount) error
		Delete(ctx context.Context, id int64) error
		FindOneByPhoneNoCach(ctx context.Context, phone string) (*CashAccount, error)
	}

	defaultCashAccountModel struct {
		sqlc.CachedConn
		table string
	}

	CashAccount struct {
		Id      int64   `db:"id"`      // id
		Phone   string  `db:"phone"`   // 账号
		Balance float64 `db:"balance"` // 余额
	}
)

func newCashAccountModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultCashAccountModel {
	return &defaultCashAccountModel{
		CachedConn: sqlc.NewConn(conn, c, cache.WithExpiry(time.Second*5)),
		table:      "`cash_account`",
	}
}

func (m *defaultCashAccountModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	devCashAccountIdKey := fmt.Sprintf("%s%v", cacheDevCashAccountIdPrefix, id)
	devCashAccountPhoneKey := fmt.Sprintf("%s%v", cacheDevCashAccountPhonePrefix, data.Phone)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, devCashAccountIdKey, devCashAccountPhoneKey)
	return err
}

func (m *defaultCashAccountModel) FindOne(ctx context.Context, id int64) (*CashAccount, error) {
	devCashAccountIdKey := fmt.Sprintf("%s%v", cacheDevCashAccountIdPrefix, id)
	var resp CashAccount
	err := m.QueryRowCtx(ctx, &resp, devCashAccountIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", cashAccountRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCashAccountModel) FindOneByPhone(ctx context.Context, phone string) (*CashAccount, error) {
	devCashAccountPhoneKey := fmt.Sprintf("%s%v", cacheDevCashAccountPhonePrefix, phone)
	var resp CashAccount
	err := m.QueryRowIndexCtx(ctx, &resp, devCashAccountPhoneKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `phone` = ? limit 1", cashAccountRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, phone); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, errors.New("notfind")
	default:
		return nil, err
	}
}

func (m *defaultCashAccountModel) FindOneByPhoneNoCach(ctx context.Context, phone string) (*CashAccount, error) {

	query := fmt.Sprintf("select %s from %s where `phone` = ? limit 1", cashAccountRows, m.table)
	var resp CashAccount
	err := m.QueryRowNoCacheCtx(ctx, &resp, query, phone)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, errors.New("notfind")
	default:
		return nil, err
	}
}

func (m *defaultCashAccountModel) Insert(ctx context.Context, data *CashAccount) (sql.Result, error) {
	devCashAccountIdKey := fmt.Sprintf("%s%v", cacheDevCashAccountIdPrefix, data.Id)
	devCashAccountPhoneKey := fmt.Sprintf("%s%v", cacheDevCashAccountPhonePrefix, data.Phone)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, cashAccountRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Phone, data.Balance)
	}, devCashAccountIdKey, devCashAccountPhoneKey)
	return ret, err
}

func (m *defaultCashAccountModel) Update(ctx context.Context, newData *CashAccount) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	devCashAccountIdKey := fmt.Sprintf("%s%v", cacheDevCashAccountIdPrefix, data.Id)
	devCashAccountPhoneKey := fmt.Sprintf("%s%v", cacheDevCashAccountPhonePrefix, data.Phone)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, cashAccountRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Phone, newData.Balance, newData.Id)
	}, devCashAccountIdKey, devCashAccountPhoneKey)
	return err
}

func (m *defaultCashAccountModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheDevCashAccountIdPrefix, primary)
}

func (m *defaultCashAccountModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", cashAccountRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCashAccountModel) tableName() string {
	return m.table
}
