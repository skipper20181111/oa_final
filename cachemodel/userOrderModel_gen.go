// Code generated by goctl. DO NOT EDIT!

package cachemodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userOrderFieldNames          = builder.RawFieldNames(&UserOrder{})
	userOrderRows                = strings.Join(userOrderFieldNames, ",")
	userOrderRowsExpectAutoSet   = strings.Join(stringx.Remove(userOrderFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	userOrderRowsWithPlaceHolder = strings.Join(stringx.Remove(userOrderFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	userOrderModel interface {
		Insert(ctx context.Context, data *UserOrder) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserOrder, error)
		FindOneByOrderSn(ctx context.Context, orderSn string) (*UserOrder, error)
		FindOneByOutTradeNo(ctx context.Context, outTradeNo string) (*UserOrder, error)
		Update(ctx context.Context, data *UserOrder) error
		Delete(ctx context.Context, id int64) error
		FindAllByPhone(ctx context.Context, phone string, pagenumber int) ([]*UserOrder, error)
		UpdateByOrderSn(ctx context.Context, newData *UserOrder) error
		UpdateStatusByOrderSn(ctx context.Context, status int64, orderSn string) error
	}

	defaultUserOrderModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserOrder struct {
		Id                     int64     `db:"id"`                      // id
		Phone                  string    `db:"phone"`                   // 账户手机号
		OrderSn                string    `db:"order_sn"`                // 订单编号
		OutTradeNo             string    `db:"out_trade_no"`            // 微信交易编号
		TransactionId          string    `db:"transaction_id"`          // 微信支付编号
		CreateOrderTime        time.Time `db:"create_order_time"`       // 订单产生时间
		Pidlist                string    `db:"pidlist"`                 // 订单商品列表
		OriginalAmount         int64     `db:"original_amount"`         // 原始金额
		PointAmount            int64     `db:"point_amount"`            // 积分点数(金额)
		ActualAmount           int64     `db:"actual_amount"`           // 实际支付金额
		CouponAmount           int64     `db:"coupon_amount"`           // 优惠券抵扣金额
		UsedCouponinfo         string    `db:"used_couponinfo"`         // 使用的优惠券信息 空值意味着没有使用优惠券
		WexinPayAmount         int64     `db:"wexin_pay_amount"`        // 微信支付金额
		CashAccountPayAmount   int64     `db:"cash_account_pay_amount"` // 现金账户支付金额
		FreightAmount          int64     `db:"freight_amount"`          // 运费金额
		Address                string    `db:"address"`                 // 收货人信息
		OrderNote              string    `db:"order_note"`              // 订单备注
		FinishWeixinpay        int64     `db:"finish_weixinpay"`        // 是否完成微信支付
		FinishAccountpay       int64     `db:"finish_accountpay"`       // 是否完成账户支付
		PointsOrder            int64     `db:"points_order"`            // 是否为积分兑换账单
		OrderStatus            int64     `db:"order_status"`            // 订单状态：0->待付款；1->待发货；2->已发货；3->已完成；4->已关闭；5->无效订单；6->已退货未退钱；7->已退货已退钱; 99->待复核
		DeliveryCompany        string    `db:"delivery_company"`        // 物流公司(配送方式)
		DeliverySn             string    `db:"delivery_sn"`             // 物流单号
		AutoConfirmDay         int64     `db:"auto_confirm_day"`        // 自动确认时间（天）
		Growth                 int64     `db:"growth"`                  // 可以活动的成长值，等于消费额
		BillType               int64     `db:"bill_type"`               // 发票类型：0->不开发票；1->电子发票；2->纸质发票
		BillInfo               string    `db:"bill_info"`               // 发票信息 {单位名称，单位地址，电话，税号，开户银行，银行账户}
		ConfirmStatus          int64     `db:"confirm_status"`          // 确认收货状态：0->未确认；1->已确认
		DeleteStatus           int64     `db:"delete_status"`           // 删除状态：0->未删除；1->已删除
		PaymentTime            time.Time `db:"payment_time"`            // 支付时间
		DeliveryTime           time.Time `db:"delivery_time"`           // 发货时间
		ReceiveTime            time.Time `db:"receive_time"`            // 确认收货时间
		CloseTime              time.Time `db:"close_time"`              // 订单关闭时间
		ModifyTime             time.Time `db:"modify_time"`             // 修改时间
		LogId                  int64     `db:"log_id"`
		OriginalOriginalAmount int64     `db:"original_original_amount"` // 原始原始金额
	}
)

func newUserOrderModel(conn sqlx.SqlConn) *defaultUserOrderModel {
	return &defaultUserOrderModel{
		conn:  conn,
		table: "`user_order`",
	}
}

func (m *defaultUserOrderModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserOrderModel) FindOne(ctx context.Context, id int64) (*UserOrder, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userOrderRows, m.table)
	var resp UserOrder
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserOrderModel) FindOneByOrderSn(ctx context.Context, orderSn string) (*UserOrder, error) {
	var resp UserOrder
	query := fmt.Sprintf("select %s from %s where `order_sn` = ? limit 1", userOrderRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, orderSn)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserOrderModel) FindOneByOutTradeNo(ctx context.Context, outTradeNo string) (*UserOrder, error) {
	var resp UserOrder
	query := fmt.Sprintf("select %s from %s where `out_trade_no` = ? limit 1", userOrderRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, outTradeNo)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserOrderModel) Insert(ctx context.Context, data *UserOrder) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userOrderRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Phone, data.OrderSn, data.OutTradeNo, data.TransactionId, data.CreateOrderTime, data.Pidlist, data.OriginalAmount, data.PointAmount, data.ActualAmount, data.CouponAmount, data.UsedCouponinfo, data.WexinPayAmount, data.CashAccountPayAmount, data.FreightAmount, data.Address, data.OrderNote, data.FinishWeixinpay, data.FinishAccountpay, data.PointsOrder, data.OrderStatus, data.DeliveryCompany, data.DeliverySn, data.AutoConfirmDay, data.Growth, data.BillType, data.BillInfo, data.ConfirmStatus, data.DeleteStatus, data.PaymentTime, data.DeliveryTime, data.ReceiveTime, data.CloseTime, data.ModifyTime, data.LogId, data.OriginalOriginalAmount)
	return ret, err
}

func (m *defaultUserOrderModel) Update(ctx context.Context, newData *UserOrder) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userOrderRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Phone, newData.OrderSn, newData.OutTradeNo, newData.TransactionId, newData.CreateOrderTime, newData.Pidlist, newData.OriginalAmount, newData.PointAmount, newData.ActualAmount, newData.CouponAmount, newData.UsedCouponinfo, newData.WexinPayAmount, newData.CashAccountPayAmount, newData.FreightAmount, newData.Address, newData.OrderNote, newData.FinishWeixinpay, newData.FinishAccountpay, newData.PointsOrder, newData.OrderStatus, newData.DeliveryCompany, newData.DeliverySn, newData.AutoConfirmDay, newData.Growth, newData.BillType, newData.BillInfo, newData.ConfirmStatus, newData.DeleteStatus, newData.PaymentTime, newData.DeliveryTime, newData.ReceiveTime, newData.CloseTime, newData.ModifyTime, newData.LogId, newData.OriginalOriginalAmount, newData.Id)
	return err
}
func (m *defaultUserOrderModel) FindAllByPhone(ctx context.Context, phone string, pagenumber int) ([]*UserOrder, error) {
	if pagenumber <= 0 || pagenumber > 10 {
		pagenumber = 1
	}
	sheetlen := 10
	offset := sheetlen * (pagenumber - 1)
	query := fmt.Sprintf("select %s from %s where `phone` = ? and `order_status`<99  order by create_order_time desc  limit ? OFFSET ?", userOrderRows, m.table)
	var resp []*UserOrder
	err := m.conn.QueryRowsCtx(ctx, &resp, query, phone, sheetlen, offset)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultUserOrderModel) UpdateStatusByOrderSn(ctx context.Context, status int64, orderSn string) error {
	query := fmt.Sprintf("update %s set `order_status`=? where `order_sn` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, status, orderSn)
	return err
}
func (m *defaultUserOrderModel) UpdateByOrderSn(ctx context.Context, newData *UserOrder) error {
	query := fmt.Sprintf("update %s set %s where `order_sn` = ?", m.table, userOrderRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Phone, newData.OrderSn, newData.OutTradeNo, newData.TransactionId, newData.CreateOrderTime, newData.Pidlist, newData.OriginalAmount, newData.PointAmount, newData.ActualAmount, newData.CouponAmount, newData.UsedCouponinfo, newData.WexinPayAmount, newData.CashAccountPayAmount, newData.FreightAmount, newData.Address, newData.OrderNote, newData.FinishWeixinpay, newData.FinishAccountpay, newData.PointsOrder, newData.OrderStatus, newData.DeliveryCompany, newData.DeliverySn, newData.AutoConfirmDay, newData.Growth, newData.BillType, newData.BillInfo, newData.ConfirmStatus, newData.DeleteStatus, newData.PaymentTime, newData.DeliveryTime, newData.ReceiveTime, newData.CloseTime, newData.ModifyTime, newData.LogId, newData.OriginalOriginalAmount, newData.OrderSn)
	return err
}
func (m *defaultUserOrderModel) tableName() string {
	return m.table
}
