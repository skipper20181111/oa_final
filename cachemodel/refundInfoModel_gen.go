// Code generated by goctl. DO NOT EDIT!

package cachemodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	refundInfoFieldNames          = builder.RawFieldNames(&RefundInfo{})
	refundInfoRows                = strings.Join(refundInfoFieldNames, ",")
	refundInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(refundInfoFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	refundInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(refundInfoFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	refundInfoModel interface {
		Insert(ctx context.Context, data *RefundInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RefundInfo, error)
		FindOneByOutRefundNo(ctx context.Context, outRefundNo string) (*RefundInfo, error)
		Update(ctx context.Context, data *RefundInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRefundInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RefundInfo struct {
		Id              int64     `db:"id"`                // id
		Phone           string    `db:"phone"`             // 账户手机号
		OutTradeNo      string    `db:"out_trade_no"`      // 微信交易编号
		OutRefundNo     string    `db:"out_refund_no"`     // 微信退款编号
		Status          int64     `db:"status"`            // 0->未完成；1->已完成
		WexinRefundTime time.Time `db:"wexin_refund_time"` // 微信退款时间
		RefundAmount    int64     `db:"refund_amount"`     // 微信退款额度
	}
)

func newRefundInfoModel(conn sqlx.SqlConn) *defaultRefundInfoModel {
	return &defaultRefundInfoModel{
		conn:  conn,
		table: "`refund_info`",
	}
}

func (m *defaultRefundInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRefundInfoModel) FindOne(ctx context.Context, id int64) (*RefundInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", refundInfoRows, m.table)
	var resp RefundInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRefundInfoModel) FindOneByOutRefundNo(ctx context.Context, outRefundNo string) (*RefundInfo, error) {
	var resp RefundInfo
	query := fmt.Sprintf("select %s from %s where `out_refund_no` = ? limit 1", refundInfoRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, outRefundNo)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRefundInfoModel) Insert(ctx context.Context, data *RefundInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, refundInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Phone, data.OutTradeNo, data.OutRefundNo, data.Status, data.WexinRefundTime, data.RefundAmount)
	return ret, err
}

func (m *defaultRefundInfoModel) Update(ctx context.Context, newData *RefundInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, refundInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Phone, newData.OutTradeNo, newData.OutRefundNo, newData.Status, newData.WexinRefundTime, newData.RefundAmount, newData.Id)
	return err
}

func (m *defaultRefundInfoModel) tableName() string {
	return m.table
}
