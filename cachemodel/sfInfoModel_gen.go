// Code generated by goctl. DO NOT EDIT!

package cachemodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sfInfoFieldNames          = builder.RawFieldNames(&SfInfo{})
	sfInfoRows                = strings.Join(sfInfoFieldNames, ",")
	sfInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(sfInfoFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	sfInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(sfInfoFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	sfInfoModel interface {
		Insert(ctx context.Context, data *SfInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SfInfo, error)
		FindOneByOrderSn(ctx context.Context, orderSn string) (*SfInfo, error)
		Update(ctx context.Context, data *SfInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSfInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SfInfo struct {
		Id          int64  `db:"id"`           // id
		Phone       string `db:"phone"`        // 账户手机号
		OrderSn     string `db:"order_sn"`     // 订单编号
		OutTradeNo  string `db:"out_trade_no"` // 微信交易编号
		ProductInfo string `db:"product_info"` // 订单商品详情
		OrderNote   string `db:"order_note"`   // 订单备注
		DeliverySn  string `db:"delivery_sn"`  // 物流单号
		OrderType   int64  `db:"order_type"`   // 顺丰订单状态 0->未打印，1->已打印，2->已确认打印，3->已确认发货
	}
)

func newSfInfoModel(conn sqlx.SqlConn) *defaultSfInfoModel {
	return &defaultSfInfoModel{
		conn:  conn,
		table: "`sf_info`",
	}
}

func (m *defaultSfInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSfInfoModel) FindOne(ctx context.Context, id int64) (*SfInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sfInfoRows, m.table)
	var resp SfInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSfInfoModel) FindOneByOrderSn(ctx context.Context, orderSn string) (*SfInfo, error) {
	var resp SfInfo
	query := fmt.Sprintf("select %s from %s where `order_sn` = ? limit 1", sfInfoRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, orderSn)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSfInfoModel) Insert(ctx context.Context, data *SfInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, sfInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Phone, data.OrderSn, data.OutTradeNo, data.ProductInfo, data.OrderNote, data.DeliverySn, data.OrderType)
	return ret, err
}

func (m *defaultSfInfoModel) Update(ctx context.Context, newData *SfInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sfInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Phone, newData.OrderSn, newData.OutTradeNo, newData.ProductInfo, newData.OrderNote, newData.DeliverySn, newData.OrderType, newData.Id)
	return err
}

func (m *defaultSfInfoModel) tableName() string {
	return m.table
}
