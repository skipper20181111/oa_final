// Code generated by goctl. DO NOT EDIT!

package cachemodel

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	couponFieldNames          = builder.RawFieldNames(&Coupon{})
	couponRows                = strings.Join(couponFieldNames, ",")
	couponRowsExpectAutoSet   = strings.Join(stringx.Remove(couponFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	couponRowsWithPlaceHolder = strings.Join(stringx.Remove(couponFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheDevCouponIdPrefix       = "cache:dev:coupon:id:"
	cacheDevCouponCouponIdPrefix = "cache:dev:coupon:couponId:"
)

type (
	couponModel interface {
		Insert(ctx context.Context, data *Coupon) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Coupon, error)
		FindOneByCouponId(ctx context.Context, couponId int64) (*Coupon, error)
		Update(ctx context.Context, data *Coupon) error
		Delete(ctx context.Context, id int64) error
		FindOneByCouponIdNoCache(ctx context.Context, couponId int64) (*Coupon, error)
	}

	defaultCouponModel struct {
		sqlc.CachedConn
		table string
	}

	Coupon struct {
		Id              int64     `db:"id"`
		CouponId        int64     `db:"coupon_id"`
		Type            int64     `db:"type"` // 优惠券类型；0->满减；1->代金券；2->打折; 9-> 老带新专属代码，只能有一个
		Name            string    `db:"name"`
		Limitation      int64     `db:"limitation"`       // 单人拥有数量限额
		Discount        int64     `db:"discount"`         // 打折折扣
		Cut             int64     `db:"cut"`              // 满减额度
		MinPoint        int64     `db:"min_point"`        // 满减使用门槛；0表示无门槛
		AvailableAmount int64     `db:"available_amount"` // 代金券金额
		UseType         int64     `db:"use_type"`         // 使用类型：0->全场通用；1->指定分类；2->指定商品
		Note            string    `db:"note"`             // 备注
		EnableTime      time.Time `db:"enable_time"`      // 有效日期
		DisableTime     time.Time `db:"disable_time"`     // 失效日期
		TypeZh          string    `db:"type_zh"`          // 优惠券的类型
		EfficientPeriod int64     `db:"efficient_period"`
		Picture         string    `db:"picture"`    // 优惠券图片
		UsePoints       int64     `db:"use_points"` // 兑换需要的积分
	}
)

func newCouponModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultCouponModel {
	return &defaultCouponModel{
		CachedConn: sqlc.NewConn(conn, c, cache.WithExpiry(time.Second*5)),
		table:      "`coupon`",
	}
}

func (m *defaultCouponModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	devCouponCouponIdKey := fmt.Sprintf("%s%v", cacheDevCouponCouponIdPrefix, data.CouponId)
	devCouponIdKey := fmt.Sprintf("%s%v", cacheDevCouponIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, devCouponCouponIdKey, devCouponIdKey)
	return err
}
func (m *defaultCouponModel) FindOneByCouponIdNoCache(ctx context.Context, couponId int64) (*Coupon, error) {
	var resp Coupon
	query := fmt.Sprintf("select %s from %s where `coupon_id` = ? limit 1", couponRows, m.table)
	err := m.QueryRowNoCacheCtx(ctx, &resp, query, couponId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, errors.New("notfind")
	default:
		return nil, err
	}
}
func (m *defaultCouponModel) FindOne(ctx context.Context, id int64) (*Coupon, error) {
	devCouponIdKey := fmt.Sprintf("%s%v", cacheDevCouponIdPrefix, id)
	var resp Coupon
	err := m.QueryRowCtx(ctx, &resp, devCouponIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", couponRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCouponModel) FindOneByCouponId(ctx context.Context, couponId int64) (*Coupon, error) {
	devCouponCouponIdKey := fmt.Sprintf("%s%v", cacheDevCouponCouponIdPrefix, couponId)
	var resp Coupon
	err := m.QueryRowIndexCtx(ctx, &resp, devCouponCouponIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `coupon_id` = ? limit 1", couponRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, couponId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCouponModel) Insert(ctx context.Context, data *Coupon) (sql.Result, error) {
	devCouponCouponIdKey := fmt.Sprintf("%s%v", cacheDevCouponCouponIdPrefix, data.CouponId)
	devCouponIdKey := fmt.Sprintf("%s%v", cacheDevCouponIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, couponRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CouponId, data.Type, data.Name, data.Limitation, data.Discount, data.Cut, data.MinPoint, data.AvailableAmount, data.UseType, data.Note, data.EnableTime, data.DisableTime, data.TypeZh, data.EfficientPeriod, data.Picture, data.UsePoints)
	}, devCouponCouponIdKey, devCouponIdKey)
	return ret, err
}

func (m *defaultCouponModel) Update(ctx context.Context, newData *Coupon) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	devCouponCouponIdKey := fmt.Sprintf("%s%v", cacheDevCouponCouponIdPrefix, data.CouponId)
	devCouponIdKey := fmt.Sprintf("%s%v", cacheDevCouponIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, couponRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.CouponId, newData.Type, newData.Name, newData.Limitation, newData.Discount, newData.Cut, newData.MinPoint, newData.AvailableAmount, newData.UseType, newData.Note, newData.EnableTime, newData.DisableTime, newData.TypeZh, newData.EfficientPeriod, newData.Picture, newData.UsePoints, newData.Id)
	}, devCouponCouponIdKey, devCouponIdKey)
	return err
}

func (m *defaultCouponModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheDevCouponIdPrefix, primary)
}

func (m *defaultCouponModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", couponRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCouponModel) tableName() string {
	return m.table
}
