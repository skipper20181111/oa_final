// Code generated by goctl. DO NOT EDIT!

package cachemodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sfPriceFieldNames          = builder.RawFieldNames(&SfPrice{})
	sfPriceRows                = strings.Join(sfPriceFieldNames, ",")
	sfPriceRowsExpectAutoSet   = strings.Join(stringx.Remove(sfPriceFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	sfPriceRowsWithPlaceHolder = strings.Join(stringx.Remove(sfPriceFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	sfPriceModel interface {
		Insert(ctx context.Context, data *SfPrice) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SfPrice, error)
		FindOneByProvince(ctx context.Context, province string) (*SfPrice, error)
		Update(ctx context.Context, data *SfPrice) error
		Delete(ctx context.Context, id int64) error
		FindAll(ctx context.Context) ([]*SfPrice, error)
	}

	defaultSfPriceModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SfPrice struct {
		Id       int64  `db:"id"`       // id
		Province string `db:"province"` // 省份
		StartKg  int64  `db:"start_kg"` // 起步价
		PerKg    int64  `db:"per_kg"`   // 加价
	}
)

func newSfPriceModel(conn sqlx.SqlConn) *defaultSfPriceModel {
	return &defaultSfPriceModel{
		conn:  conn,
		table: "`sf_price`",
	}
}

func (m *defaultSfPriceModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}
func (m *defaultSfPriceModel) FindAll(ctx context.Context) ([]*SfPrice, error) {
	query := fmt.Sprintf("select %s from %s", sfPriceRows, m.table)
	var resp []*SfPrice
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultSfPriceModel) FindOne(ctx context.Context, id int64) (*SfPrice, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sfPriceRows, m.table)
	var resp SfPrice
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSfPriceModel) FindOneByProvince(ctx context.Context, province string) (*SfPrice, error) {
	var resp SfPrice
	query := fmt.Sprintf("select %s from %s where `province` = ? limit 1", sfPriceRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, province)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSfPriceModel) Insert(ctx context.Context, data *SfPrice) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, sfPriceRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Province, data.StartKg, data.PerKg)
	return ret, err
}

func (m *defaultSfPriceModel) Update(ctx context.Context, newData *SfPrice) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sfPriceRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Province, newData.StartKg, newData.PerKg, newData.Id)
	return err
}

func (m *defaultSfPriceModel) tableName() string {
	return m.table
}
