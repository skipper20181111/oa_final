// Code generated by goctl. DO NOT EDIT!

package cachemodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	starmallLonglistFieldNames          = builder.RawFieldNames(&StarmallLonglist{})
	starmallLonglistRows                = strings.Join(starmallLonglistFieldNames, ",")
	starmallLonglistRowsExpectAutoSet   = strings.Join(stringx.Remove(starmallLonglistFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	starmallLonglistRowsWithPlaceHolder = strings.Join(stringx.Remove(starmallLonglistFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	starmallLonglistModel interface {
		Insert(ctx context.Context, data *StarmallLonglist) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*StarmallLonglist, error)
		Update(ctx context.Context, data *StarmallLonglist) error
		Delete(ctx context.Context, id int64) error
		FindAll(ctx context.Context) ([]*StarmallLonglist, error)
	}

	defaultStarmallLonglistModel struct {
		conn  sqlx.SqlConn
		table string
	}

	StarmallLonglist struct {
		Id             int64 `db:"id"`              // id
		Subregion      int64 `db:"subregion"`       // 0->长列表商品区，1->礼品级商品区，2->促销区
		Cid            int64 `db:"cid"`             // 商品种类id
		ProductId      int64 `db:"product_id"`      // 商品id
		ExchangePoints int64 `db:"exchange_points"` // 兑换所需积分
	}
)

func newStarmallLonglistModel(conn sqlx.SqlConn) *defaultStarmallLonglistModel {
	return &defaultStarmallLonglistModel{
		conn:  conn,
		table: "`starmall_longlist`",
	}
}
func (m *defaultStarmallLonglistModel) FindAll(ctx context.Context) ([]*StarmallLonglist, error) {
	query := fmt.Sprintf("select %s from %s", starmallLonglistRows, m.table)
	var resp []*StarmallLonglist
	err := m.conn.QueryRowCtx(ctx, &resp, query)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultStarmallLonglistModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultStarmallLonglistModel) FindOne(ctx context.Context, id int64) (*StarmallLonglist, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", starmallLonglistRows, m.table)
	var resp StarmallLonglist
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStarmallLonglistModel) Insert(ctx context.Context, data *StarmallLonglist) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, starmallLonglistRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Subregion, data.Cid, data.ProductId, data.ExchangePoints)
	return ret, err
}

func (m *defaultStarmallLonglistModel) Update(ctx context.Context, data *StarmallLonglist) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, starmallLonglistRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Subregion, data.Cid, data.ProductId, data.ExchangePoints, data.Id)
	return err
}

func (m *defaultStarmallLonglistModel) tableName() string {
	return m.table
}
