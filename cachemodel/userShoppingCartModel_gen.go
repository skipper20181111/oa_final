// Code generated by goctl. DO NOT EDIT!

package cachemodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userShoppingCartFieldNames          = builder.RawFieldNames(&UserShoppingCart{})
	userShoppingCartRows                = strings.Join(userShoppingCartFieldNames, ",")
	userShoppingCartRowsExpectAutoSet   = strings.Join(stringx.Remove(userShoppingCartFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	userShoppingCartRowsWithPlaceHolder = strings.Join(stringx.Remove(userShoppingCartFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	userShoppingCartModel interface {
		Insert(ctx context.Context, data *UserShoppingCart) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserShoppingCart, error)
		FindOneByPhone(ctx context.Context, phone string) (*UserShoppingCart, error)
		Update(ctx context.Context, data *UserShoppingCart) error
		Delete(ctx context.Context, id int64) error
		UpdateByPhone(ctx context.Context, phone, sc string) error
	}

	defaultUserShoppingCartModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserShoppingCart struct {
		Id           int64  `db:"id"`
		Phone        string `db:"phone"`         // 用户手机号
		ShoppingCart string `db:"shopping_cart"` // 购物车字符串
	}
)

func newUserShoppingCartModel(conn sqlx.SqlConn) *defaultUserShoppingCartModel {
	return &defaultUserShoppingCartModel{
		conn:  conn,
		table: "`user_shopping_cart`",
	}
}

func (m *defaultUserShoppingCartModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserShoppingCartModel) FindOne(ctx context.Context, id int64) (*UserShoppingCart, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userShoppingCartRows, m.table)
	var resp UserShoppingCart
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserShoppingCartModel) FindOneByPhone(ctx context.Context, phone string) (*UserShoppingCart, error) {
	var resp UserShoppingCart
	query := fmt.Sprintf("select %s from %s where `phone` = ? limit 1", userShoppingCartRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, phone)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserShoppingCartModel) Insert(ctx context.Context, data *UserShoppingCart) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, userShoppingCartRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Phone, data.ShoppingCart)
	return ret, err
}

func (m *defaultUserShoppingCartModel) Update(ctx context.Context, newData *UserShoppingCart) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userShoppingCartRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Phone, newData.ShoppingCart, newData.Id)
	return err
}

func (m *defaultUserShoppingCartModel) UpdateByPhone(ctx context.Context, phone, sc string) error {
	query := fmt.Sprintf("update %s set `shopping_cart`=? where `phone` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, sc, phone)
	return err
}

func (m *defaultUserShoppingCartModel) tableName() string {
	return m.table
}
