// Code generated by goctl. DO NOT EDIT!

package cachemodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userMissionFieldNames          = builder.RawFieldNames(&UserMission{})
	userMissionRows                = strings.Join(userMissionFieldNames, ",")
	userMissionRowsExpectAutoSet   = strings.Join(stringx.Remove(userMissionFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	userMissionRowsWithPlaceHolder = strings.Join(stringx.Remove(userMissionFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	userMissionModel interface {
		Insert(ctx context.Context, data *UserMission) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserMission, error)
		FindOneByPhone(ctx context.Context, phone string) (*UserMission, error)
		Update(ctx context.Context, data *UserMission) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserMissionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserMission struct {
		Id          int64  `db:"id"`
		Phone       string `db:"phone"`        // 手机号
		MissionInfo string `db:"mission_info"` // 任务记录
		Finished    int64  `db:"finished"`     // 任务已完成
	}
)

func newUserMissionModel(conn sqlx.SqlConn) *defaultUserMissionModel {
	return &defaultUserMissionModel{
		conn:  conn,
		table: "`user_mission`",
	}
}

func (m *defaultUserMissionModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserMissionModel) FindOne(ctx context.Context, id int64) (*UserMission, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userMissionRows, m.table)
	var resp UserMission
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserMissionModel) FindOneByPhone(ctx context.Context, phone string) (*UserMission, error) {
	var resp UserMission
	query := fmt.Sprintf("select %s from %s where `phone` = ? limit 1", userMissionRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, phone)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserMissionModel) Insert(ctx context.Context, data *UserMission) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, userMissionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Phone, data.MissionInfo, data.Finished)
	return ret, err
}

func (m *defaultUserMissionModel) Update(ctx context.Context, newData *UserMission) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userMissionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Phone, newData.MissionInfo, newData.Finished, newData.Id)
	return err
}

func (m *defaultUserMissionModel) tableName() string {
	return m.table
}
